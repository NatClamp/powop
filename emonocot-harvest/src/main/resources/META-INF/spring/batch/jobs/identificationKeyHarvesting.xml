<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
	<context:property-placeholder location="classpath*:META-INF/spring/*.properties" />
	<context:annotation-config />

	<batch:job id="IdentificationKeyHarvesting">
		<batch:description>Harvests a single SDD file containing a multi-access key</batch:description>
		<batch:step id="setTemporaryFilename">
			<batch:description>Set the temporary file name</batch:description>
			<batch:tasklet ref="setTemporaryFilenameTasklet" />
			<batch:next on="COMPLETED" to="getIdentificationKey" />
		</batch:step>
		<batch:step id="getIdentificationKey">
			<batch:description>Get the sdd file</batch:description>
			<batch:tasklet ref="getIdentificationKeyTasklet" />
			<batch:next on="NOT MODIFIED" to="cleanupResourcesNotModified" />
			<batch:next on="COMPLETED" to="processTaxonNames" />
		</batch:step>
		<batch:step id="processTaxonNames">
			<batch:description>Process the records</batch:description>
			<batch:tasklet>
				<batch:chunk reader="taxonNameReader" processor="taxonNameProcessor"
					writer="taxonNameWriter" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="processImages" />
			<batch:listeners>
			    <batch:listener ref="taxonNameProcessor"/>
				<batch:listener ref="hibernateSessionClearingChunkListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="processImages">
			<batch:description>Process the records</batch:description>
			<batch:tasklet>
				<batch:chunk reader="mediaObjectReader" processor="mediaObjectProcessor"
					writer="mediaObjectWriter" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="transformFileToJson" />
			<batch:listeners>
				<batch:listener ref="hibernateSessionClearingChunkListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="transformFileToJson">
		    <batch:description>Transform the SDD file to json</batch:description>
		    <batch:tasklet ref="xmlTransformingTasklet" />
		    <batch:next on="COMPLETED" to="processDataset"/>
		</batch:step>
		<batch:step id="processDataset">
			<batch:description>Process the Dataset</batch:description>
			<batch:tasklet>
				<batch:chunk reader="datasetReader" processor="datasetProcessor"
					writer="datasetWriter" commit-interval="10">
				</batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="cleanupResources" />
			<batch:listeners>
				<batch:listener ref="hibernateSessionClearingChunkListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="cleanupResourcesNotModified">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="resourceDeletingTasklet" />
			<batch:end on="COMPLETE" exit-code="NOT MODIFIED" />
		</batch:step>
		<batch:step id="cleanupResources">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="resourceDeletingTasklet" />
			<batch:end on="COMPLETED" />
		</batch:step>
	</batch:job>

	<bean id="setTemporaryFilenameTasklet" class="org.emonocot.job.key.SetTemporaryFilenamesTasklet">
		<property name="harvesterSpoolDirectory" value="${harvester.spool.directory}" />
	</bean>

	<bean id="resourceDeletingTasklet"
		class="org.emonocot.harvest.common.MultiResourceDeletingTasklet"
		scope="step">
		<property name="resources">
			<list>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobExecutionContext['input.file.name']}" />
				</bean>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobExecutionContext['taxon.file.name']}" />
				</bean>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobExecutionContext['image.file.name']}" />
				</bean>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobExecutionContext['output.file.name']}" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="xmlTransformingTasklet" class="org.emonocot.job.key.XmlTransformingTasklet"
		scope="step">
		<property name="inputFile">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['input.file.name']}" />
			</bean>
		</property>
		<property name="outputFile">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['output.file.name']}" />
			</bean>
		</property>
		<property name="xsltFile">
			<bean class="org.springframework.core.io.ClassPathResource">
				<constructor-arg value="org/emonocot/job/key/sddToJSON.xsl" />
			</bean>
		</property>
		<property name="parameters">
		  <map>
		    <entry>
		      <key><value>taxonFileName</value></key>
		      <value>#{jobExecutionContext['taxon.file.name']}</value>
		    </entry>
		    <entry>
		      <key><value>imageFileName</value></key>
		      <value>#{jobExecutionContext['image.file.name']}</value>
		    </entry>
		  </map>
		</property>
	</bean>

	<bean id="getIdentificationKeyTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="getResourceClient" />
		<property name="targetMethod" value="getResource" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['authority.name']}</value>
				<value>#{jobParameters['authority.uri']}</value>
				<value>#{jobParameters['authority.last.harvested']}</value>
				<value>#{jobExecutionContext['input.file.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="taxonNameReader" class="org.emonocot.job.io.StaxEventItemReader"
		scope="step">
		<property name="fragmentRootElementName" value="TaxonName" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['input.file.name']}" />
			</bean>
		</property>
		<property name="unmarshaller" ref="keyUnmarshaller" />
		<property name="encoding" value="UTF-8" />
	</bean>

	<bean id="taxonNameProcessor" class="org.emonocot.job.key.TaxonNameProcessor"
		scope="step">
		<property name="nameParser" ref="nameParser" />
		<property name="taxonMatcher" ref="taxonMatcher" />
		<property name="taxonService" ref="taxonServiceImpl" />
		<property name="sessionFactory" ref="sessionFactory"/>
		<property name="transactionManager" ref="transactionManager"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
	</bean>

	<bean id="taxonNameWriter" class="org.emonocot.model.marshall.xml.StaxEventItemWriter">
		<property name="encoding" value="UTF-8" />
		<property name="marshaller" ref="keyUnmarshaller" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['taxon.file.name']}" />
			</bean>
		</property>
		<property name="rootTagName" value="TaxonNames"/>
		<property name="rootElementAttributes">
		  <map>
		    <entry>
		      <key>
		        <value>xmlns</value>
		      </key>
		      <value>http://rs.tdwg.org/UBIF/2006/</value>
		    </entry>
		  </map>
		</property>
	</bean>
	
	<bean id="mediaObjectReader" class="org.emonocot.job.io.StaxEventItemReader"
		scope="step">
		<property name="fragmentRootElementName" value="MediaObject" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['input.file.name']}" />
			</bean>
		</property>
		<property name="unmarshaller" ref="keyUnmarshaller" />
		<property name="encoding" value="UTF-8" />
	</bean>

	<bean id="mediaObjectProcessor" class="org.emonocot.job.key.MediaObjectProcessor"
		scope="step">
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
	</bean>

	<bean id="mediaObjectWriter" class="org.emonocot.model.marshall.xml.StaxEventItemWriter">
		<property name="encoding" value="UTF-8" />
		<property name="marshaller" ref="keyUnmarshaller" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['image.file.name']}" />
			</bean>
		</property>
		<property name="rootTagName" value="MediaObjects"/>
		<property name="rootElementAttributes">
		  <map>
		    <entry>
		      <key>
		        <value>xmlns</value>
		      </key>
		      <value>http://rs.tdwg.org/UBIF/2006/</value>
		    </entry>
		  </map>
		</property>
	</bean>
	
	<bean id="datasetReader" class="org.emonocot.job.io.StaxEventItemReader"
		scope="step">
		<property name="fragmentRootElementName" value="Dataset" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['input.file.name']}" />
			</bean>
		</property>
		<property name="unmarshaller" ref="keyUnmarshaller" />
		<property name="encoding" value="UTF-8" />
	</bean>

	<bean id="datasetProcessor" class="org.emonocot.job.key.DatasetProcessor"
		scope="step">
		<property name="rootTaxonIdentifier" value="#{jobExecutionContext['root.taxon.identifier']}" />
		<property name="taxonService" ref="taxonServiceImpl" />
		<property name="authorityUri" value="#{jobParameters['authority.uri']}" />
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="matrixFile">
		  <bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['output.file.name']}" />
			</bean>
		</property>
	</bean>
	
	<bean id="datasetWriter"
		class="org.springframework.batch.item.database.HibernateItemWriter">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="clearSession" value="false"/>
	</bean>

	<bean id="hibernateSessionClearingChunkListener"
		class="org.emonocot.harvest.common.HibernateSessionClearingChunkListener" />

	<bean id="keyUnmarshaller" class="org.emonocot.model.marshall.xml.XStreamMarshaller">
		<property name="autodetectAnnotations" value="true" />
		<property name="streamDriver" ref="streamDriver" />
		<property name="converters">
			<list>
				<bean class="org.emonocot.model.marshall.xml.UriConverter" />
				<bean class="org.tdwg.ubif.marshall.xml.IgnoreConverter" />
			</list>
		</property>
		<property name="aliases">
			<map>
				<entry>
					<key>
						<value>TaxonName</value>
					</key>
					<value>org.tdwg.ubif.TaxonName</value>					
				</entry>
				<entry>
					<key>
						<value>Dataset</value>
					</key>
					<value>org.tdwg.ubif.Dataset</value>					
				</entry>
				<entry>
					<key>
						<value>Agent</value>
					</key>
					<value>org.tdwg.ubif.Agent</value>					
				</entry>
				<entry>
					<key>
						<value>MediaObject</value>
					</key>
					<value>org.tdwg.ubif.MediaObject</value>					
				</entry>
			</map>
		</property>
	</bean>

	<bean id="streamDriver" class="org.emonocot.model.marshall.xml.StaxDriver">
		<constructor-arg ref="qNameMap" />
		<property name="repairingNamespace" value="false" />
		<property name="xmlInputFactory">
			<bean class="com.bea.xml.stream.MXParserFactory" />
		</property>
	</bean>

	<bean id="qNameMap" class="org.tdwg.ubif.marshall.xml.QNameMapFactory" />

</beans>
