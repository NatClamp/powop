<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
	                    
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:META-INF/spring/*.properties"/>
	<context:annotation-config />

	<batch:job id="TaxonMatching">
	    <batch:description>Reads a file and checks each line for matching taxa</batch:description>
	    <batch:step id="processFile">
	      <batch:description>Process the specified file and check for matches</batch:description>
			<batch:tasklet>
				<batch:chunk reader="fileReader" processor="taxonMatchingProcessor"
					writer="outputWriter" commit-interval="100">
				</batch:chunk>			    
			</batch:tasklet>			
			<batch:end on="COMPLETED" />
			<batch:listeners>
			  <batch:listener ref="footerCallback"/>
			</batch:listeners>	      
	    </batch:step>
	</batch:job>
	
	<bean id="outputWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
	  <property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobParameters['output.file']}" />
			</bean>
		</property>
		<property name="lineAggregator" ref="lineAggregator"/>
		<property name="headerCallback">
		  <bean class="org.emonocot.job.taxonmatch.HeaderCallback"/>
		</property>
		<property name="footerCallback" ref="footerCallback"/>
	</bean>
	
	<bean name="footerCallback" class="org.emonocot.job.taxonmatch.FooterCallback"/>
	
	<bean name="lineAggregator" class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
	 <property name="delimiter" value=","/>
	 <property name="fieldExtractor">
	   <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
	     <property name="names">
	       <array>
	         <value>external.identifier</value>
	         <value>external.name</value>
	         <value>status</value>
	         <value>internal.identifier</value>
             <value>internal.name</value>
	       </array>
	     </property>
	   </bean>
	 </property>
	</bean>
	
	<bean id="fileReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding">
			<value>UTF-8</value>
		</property>
		<property name="linesToSkip">
			<value>1</value>
		</property>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobParameters['input.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="lineMapper" />
	</bean>

	<bean id="taxonMatchingProcessor" class="org.emonocot.job.taxonmatch.Processor">
	  <property name="taxonMatcher" ref="taxonMatcher" />
	  <property name="nameParser" ref="nameParser" />
	</bean>

	<bean id="lineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="lineTokenizer" />
		<property name="fieldSetMapper" ref="fieldSetMapper" />
	</bean>

	<bean id="lineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<property name="names">
			<list>
			  <value>identifier</value>
			  <value>name</value>
			</list>
		</property>		
		<property name="delimiter">
			<value>,</value>
		</property>
		<property name="strict" value="false"/>
	</bean>

	<bean id="fieldSetMapper" class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
	    <property name="targetType">
			<value>org.emonocot.api.taxonmatch.TaxonDTO</value>
		</property>		
	</bean>
	
</beans>
