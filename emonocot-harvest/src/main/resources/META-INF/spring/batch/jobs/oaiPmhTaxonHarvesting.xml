<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
    <context:property-placeholder location="classpath*:META-INF/spring/*.properties"/>
	<context:annotation-config />

	<batch:job id="OaiPmhTaxonHarvesting">
	    <batch:description>Harvests records from an OAI-PMH repository</batch:description>	    
	    <batch:step id="setTemporaryFilename">
			<batch:description>Set the temporary file name</batch:description>
			<batch:tasklet ref="setTemporaryFilenameTasklet" />			
			<batch:next on="COMPLETED" to="listRecords" />
		</batch:step>
		<batch:step id="listRecords">
		    <batch:description>Call ListRecords on the resource, using the resumption token if available</batch:description>
			<batch:tasklet ref="oaiPmhListRecordsTasklet" />
			<batch:next on="FAILED" to="cleanupResources" />
			<batch:next on="NO RECORDS MATCH" to="cleanupResources" />
			<batch:next on="COMPLETED" to="processRecords" />
			<batch:listeners>
				<batch:listener ref="oaiPmhClient" />
			</batch:listeners>
		</batch:step>
		<batch:step id="processRecords">
		    <batch:description>Process the records</batch:description>
			<batch:tasklet>
				<batch:chunk reader="itemReader" processor="itemProcessor"
					writer="itemWriter" commit-interval="10">
			    </batch:chunk>
			</batch:tasklet>
			<batch:next on="COMPLETED" to="resumeHarvesting" />
			<batch:listeners>
				  <batch:listener ref="taxonItemProcessor" />
				  <batch:listener ref="taxonItemValidator" />
				  <batch:listener ref="taxonRelationshipResolver"/>
				  <batch:listener ref="hibernateSessionClearingChunkListener"/>
			</batch:listeners>
		</batch:step>
		<batch:step id="resumeHarvesting">
		    <batch:description>Is there a resumption token available or should we finish harvesting?</batch:description>
			<batch:tasklet ref="oaiPmhResumptionTokenTasklet" />
			<batch:next on="NO RESUMPTION TOKEN" to="checkNullRecords" />
			<batch:next on="RESUMPTION TOKEN PRESENT" to="throttleRequests" />
			<batch:listeners>
				<batch:listener ref="oaiPmhClient" />
			</batch:listeners>
		</batch:step>
		<batch:step id="throttleRequests">
		    <batch:description>Waits for a defined period to avoid overwhelming the server with lots of requests</batch:description>
			<batch:tasklet ref="throttleRequestsTasklet" />
			<batch:next on="COMPLETED" to="listRecords" />
	    </batch:step>
	    <batch:step id="checkNullRecords">
	        <batch:description>Get the NULL records which haven't been harvested within this job</batch:description>
	        <batch:tasklet>
	          <batch:chunk reader="nullItemReader" processor="nullItemProcessor"
					writer="itemWriter" commit-interval="10"/>
	        </batch:tasklet>
	        <batch:next on="COMPLETED" to="cleanupResources"/>
	        <batch:listeners>
	          <batch:listener ref="nullItemProcessor"/>
	          <batch:listener ref="hibernateSessionClearingChunkListener"/>
	        </batch:listeners>
	    </batch:step>
		<batch:step id="cleanupResources">
		    <batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="oaiPmhResourceDeletingTasklet" />
			<batch:next on="COMPLETED" to="clearRegions"/>
		</batch:step>		
		<batch:listeners>
		  <batch:listener ref="jobStatusListener"/>
		</batch:listeners>	
	</batch:job>
	
	<bean id="jobStatusListener" class="org.emonocot.harvest.common.JobStatusListener">
	  <property name="jobStatusNotifier" ref="jobStatusNotifier"/>
	  <property name="baseUrl" value="${harvester.baseUrl}"/>
	</bean>
	
	<bean id="setTemporaryFilenameTasklet" class="org.emonocot.harvest.common.SetTemporaryFilenameTasklet">
		<property name="harvesterSpoolDirectory" value="${harvester.spool.directory}"/>
	</bean>
	
	<bean id="throttleRequestsTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="waitingBean" />
		<property name="targetMethod" value="wait" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['request.interval']}</value>
			</list>
		</property>
	</bean>
	
	<bean id="waitingBean" class="org.emonocot.harvest.common.DelayingBean"/>

	<bean id="oaiPmhResumptionTokenTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="oaiPmhClient" />
		<property name="targetMethod" value="resumptionTokenPresent" />
		<property name="arguments">
			<list>
				<value>#{jobExecutionContext['temporary.file.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="oaiPmhResourceDeletingTasklet"
		class="org.emonocot.harvest.common.MultiResourceDeletingTasklet"
		scope="step">
		<property name="resources">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
			</bean>
		</property>
	</bean>

	<bean id="oaiPmhListRecordsTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="oaiPmhClient" />
		<property name="targetMethod" value="listRecords" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['authority.name']}</value>
				<value>#{jobParameters['authority.uri']}</value>
				<value>#{jobParameters['authority.last.harvested']}</value>
				<value>#{jobExecutionContext['temporary.file.name']}</value>
				<value>#{jobParameters['request.subset.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="oaiPmhClient" class="org.emonocot.ws.oaipmh.Client">
		<property name="unmarshaller" ref="oaiPmhResponseUnmarshaller" />
		<property name="proxyHost" value="${http.proxyHost}" />
		<property name="proxyPort" value="${http.proxyPort}" />
		<property name="socketTimeoutMillis" value="${webservice.client.socketTimeoutMillis}"/>
        <property name="servicesClientIdentifier" value="${harvester.services.client.identifier}"/>
	</bean>

	<bean id="itemReader" class="org.emonocot.job.io.StaxEventItemReader"
		scope="step">
		<property name="fragmentRootElementName" value="{http://www.openarchives.org/OAI/2.0/}record" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
			</bean>
		</property>
		<property name="unmarshaller" ref="oaiPmhResponseUnmarshaller" />
		<property name="encoding" value="UTF-8"/>
	</bean>

	<bean id="oaiPmhResponseUnmarshaller" class="org.emonocot.model.marshall.xml.XStreamMarshaller">
		<property name="autodetectAnnotations" value="true" />
		<property name="qNameMap" ref="oaiPmhQNameMap" />
		<property name="reflectionProvider" ref="reflectionProvider" />
		<property name="streamDriver" ref="oaiPmhResponseStreamDriver" />
		<property name="converters">
			<list>
				<bean class="org.openarchives.pmh.marshall.xml.ResumptionTokenConverter" />
				<bean class="org.emonocot.model.marshall.xml.UriConverter" />
			</list>
		</property>
	</bean>

	<bean id="reflectionProvider" class="org.openarchives.pmh.marshall.xml.ReflectionProviderFactory" />

	<bean id="oaiPmhResponseStreamDriver" class="org.emonocot.model.marshall.xml.StaxDriver">
		<constructor-arg ref="oaiPmhQNameMap" />
		<property name="repairingNamespace" value="false" />
		<property name="xmlInputFactory">
			<bean class="com.bea.xml.stream.MXParserFactory" />
		</property>
	</bean>

	<bean id="oaiPmhQNameMap"
		class="org.openarchives.pmh.marshall.xml.OpenArchivesQNameMapFactory" />

	<bean id="itemProcessor"
		class="org.springframework.batch.item.support.CompositeItemProcessor"
		scope="step">
		<property name="delegates">
			<list>				
				<ref bean="taxonItemProcessor"/>
				<ref bean="taxonItemValidator" />
			</list>
		</property>
	</bean>
	
	<bean id="nullItemReader" class="org.springframework.batch.item.database.HibernateCursorItemReader" scope="step">
	  <property name="useStatelessSession" value="false"/>
	  <property name="sessionFactory" ref="sessionFactory" />
	  <property name="queryString" value="select t.identifier from Taxon t left join t.annotations a where a.jobId = :jobId and a.code = :code and t.scientificName is null"/>
	  <property name="parameterValues">
	    <map>
	     <entry key="jobId" value="#{stepExecution.jobExecutionId}"/>
	     <entry key="code" value="#{T(org.emonocot.model.constants.AnnotationCode).Create}"/>
	    </map>
	  </property>
	</bean>
	
	<bean id="taxonRelationshipResolver" class="org.emonocot.harvest.common.TaxonRelationshipResolverImpl" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	  <property name="taxonService" ref="taxonServiceImpl"/>
	</bean>

    <bean id="taxonItemProcessor" class="org.emonocot.job.oaipmh.ProcessorImpl" scope="step">
      <property name="taxonService" ref="taxonServiceImpl"/>
      <property name="taxonRelationshipResolver" ref="taxonRelationshipResolver"/>
      <property name="sourceService" ref="sourceServiceImpl"/>
      <property name="sourceName" value="#{jobParameters['authority.name']}"/>
      <property name="referenceService" ref="referenceServiceImpl"/>
      <property name="conversionService" ref="conversionService"/>
    </bean>

	<bean id="taxonItemValidator" class="org.emonocot.job.oaipmh.Validator"
		scope="step">
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="sourceService" ref="sourceServiceImpl" />
		<property name="validator" ref="validator" />
	</bean>

	<bean id="itemWriter" class="org.emonocot.job.oaipmh.Writer">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="clearSession" value="false"/>
	</bean>
	
	<bean id="hibernateSessionClearingChunkListener" class="org.emonocot.harvest.common.HibernateSessionClearingChunkListener"/>
	
	<bean id="nullItemProcessor" class="org.emonocot.job.oaipmh.NullTaxonProcessor" scope="step">
	  <property name="oaiPmhClient" ref="oaiPmhClient"/>
	  <property name="oaiPmhRecordProcessor" ref="taxonItemProcessor"/>
	  <property name="taxonService" ref="taxonServiceImpl"/>
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	  <property name="sourceUri" value="#{jobParameters['authority.uri']}"/>
	  <property name="temporaryFileName" value="#{jobExecutionContext['temporary.file.name']}"/>
	</bean>
	
</beans>
