<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
	                    
    <context:property-placeholder ignore-resource-not-found="true" location="classpath*:META-INF/spring/application.properties,classpath*:META-INF/spring/database.properties,classpath*:META-INF/spring/emonocot-harvest.properties,classpath*:META-INF/spring/emonocot-harvest-db.properties"/>
	
    <context:annotation-config />
	
	<batch:job id="DeltaToDwC">
		<batch:description>Create a darwin core archive from a delta TONAT file and associated resources</batch:description>
		<batch:step id="readTaxonFile">
			<batch:tasklet>
			    <batch:chunk reader="taxonReader" writer="mapBackedTaxonMatcher" commit-interval="10"/>    
		    </batch:tasklet>
		    <batch:next on="COMPLETED" to="createDescriptionFile"/>
		</batch:step>
		<batch:step id="createDescriptionFile">
			<batch:tasklet>
			    <batch:chunk reader="deltaItemItemReader" processor="deltaNaturalLanguageProcessor" writer="deltaDescriptionFileWriter" commit-interval="10"/>    
		    </batch:tasklet>
		    <batch:next on="COMPLETED" to="createMetadataFile"/>
		</batch:step>
		<batch:step id="createMetadataFile">
			<batch:description>Create the Metadata file</batch:description>
			<batch:tasklet ref="writeMetadataTasklet"/>
			<batch:next on="COMPLETED" to="copyTaxonFile"/>
	    </batch:step>
	    <batch:step id="copyTaxonFile">
	        <batch:description>Copy the taxon file to the working directory so that it can be packaged</batch:description>
	        <batch:tasklet ref="copyTaxonFileTasklet"/>
	        <batch:next on="COMPLETED" to="packageArchive"/>
	    </batch:step>
	    <batch:step id="packageArchive">
			<batch:description>Package the archive up</batch:description>
			<batch:tasklet ref="packageArchiveTasklet"/>
			<batch:next on="COMPLETED" to="cleanupResources"/>
	    </batch:step>
	    <batch:step id="cleanupResources">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="workingDirectoryResourceDeletingTasklet" />
			<batch:end on="COMPLETED"/>
		</batch:step>
	</batch:job>
	
	<bean id="copyTaxonFileTasklet" class="org.emonocot.harvest.common.CopyFileTasklet" scope="step">
	  <property name="from">
	    <bean class="org.springframework.core.io.FileSystemResource" scope="step">
			<constructor-arg value="#{jobParameters['taxon.file']}" />
		</bean>
	  </property>
	<property name="to">
		<bean class="org.springframework.core.io.FileSystemResource"
			scope="step">
			<constructor-arg type="java.io.File">
				<bean class="java.io.File" scope="step">
					<constructor-arg type="java.io.File" value="${harvester.output.directory}/#{jobParameters['archive.file']}" />
					<constructor-arg type="java.lang.String" value="taxon.txt" />
				</bean>
			</constructor-arg>
		</bean>
	</property>
	</bean>
	
	<bean id="packageArchiveTasklet" class="org.emonocot.job.dwc.write.ArchivePackager" scope="step">
		<property name="archiveFile" value="#{jobParameters['archive.file']}"/>
		<property name="outputDirectory" value="${harvester.output.directory}"/>
		<property name="descriptionFields" value="#{jobParameters['description.file.field.names']}"/>
	</bean>
	
	<bean id="writeMetadataTasklet" class="org.emonocot.job.dwc.write.ArchiveMetadataWriter" scope="step">
		<property name="archiveFile" value="#{jobParameters['archive.file']}"/>		
		<property name="taxonFields" value="#{jobParameters['taxon.file.field.names']}"/>
		<property name="taxonDefaultValues" value="#{jobParameters['taxon.default.values']}"/>
		<property name="descriptionFields" value="#{jobParameters['description.file.field.names']}"/>
	    <property name="descriptionDefaultValues" value="#{jobParameters['description.default.values']}"/>		
		<property name="delimiter" value="#{jobParameters['fields.terminated.by']}"/>
		<property name="quoteCharacter" value="#{jobParameters['fields.enclosed.by']}"/>
		<property name="outputDirectory" value="${harvester.output.directory}"/>
		<property name="citationString" value="#{jobParameters['citation.string']}"/>
		<property name="creatorEmail" value="#{jobParameters['creator.email']}"/>
		<property name="creatorName" value="#{jobParameters['creator.name']}"/>
		<property name="description" value="#{jobParameters['meta.description']}"/>
		<property name="homepageUrl" value="#{jobParameters['homepage.url']}"/>
		<property name="identifier" value="#{jobParameters['identifier']}"/>
		<property name="logoUrl" value="#{jobParameters['logo.url']}"/>
		<property name="publisherEmail" value="#{jobParameters['publisher.email']}"/>
		<property name="publisherName" value="#{jobParameters['publisher.name']}"/>
		<property name="rights" value="#{jobParameters['rights']}"/>
		<property name="subject" value="#{jobParameters['subject']}"/>
		<property name="title" value="#{jobParameters['title']}"/>
	</bean>
	
	<bean id="taxonReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="UTF-8" />
		<property name="linesToSkip" value="#{jobParameters['taxon.file.skip.lines']}" />
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory" />
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource" scope="step">
				<constructor-arg value="#{jobParameters['taxon.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="taxonLineMapper" />
	</bean>
	
    <bean id="taxonLineMapper" class="org.springframework.batch.item.file.mapping.DefaultLineMapper" scope="step">
		<property name="lineTokenizer" ref="taxonLineTokenizer" />
		<property name="fieldSetMapper" ref="taxonFieldSetMapper" />
	</bean>

	<bean id="taxonLineTokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer" scope="step">
		<property name="names" value="#{jobParameters['taxon.file.field.names']}" />
		<property name="delimiter" value="#{jobParameters['fields.terminated.by']}" />
		<property name="quoteCharacter"	value="#{jobParameters['fields.enclosed.by']}" />
		<property name="strict" value="false" />
	</bean>

	<bean id="taxonFieldSetMapper" class="org.emonocot.job.dwc.taxon.FieldSetMapper" scope="step">
		<property name="fieldNames"	value="#{jobParameters['taxon.file.field.names']}" />
	</bean>
	
	
	<bean id="deltaContextHolder" class="org.emonocot.job.delta.DeltaContextHolderImpl" scope="step" init-method="init">
	  <property name="specsFile">
	    <bean class="org.springframework.core.io.FileSystemResource" scope="step">
		    <constructor-arg value="#{jobParameters['specs.file']}" />
		</bean>
	  </property>
	</bean>
			
	<bean id="deltaItemItemReader" class="org.emonocot.job.delta.DeltaItemItemReader" scope="step">
	  <property name="itemsFile">
	    <bean class="org.springframework.core.io.FileSystemResource" scope="step">
		    <constructor-arg value="#{jobParameters['items.file']}" />
		</bean>
	  </property>	  
	  <property name="deltaContextHolder" ref="deltaContextHolder"/>	  
	</bean>
	
	<bean id="deltaNaturalLanguageProcessor" class="org.emonocot.job.delta.DeltaNaturalLanguageProcessor" scope="step">
	  <property name="deltaContextHolder" ref="deltaContextHolder"/>
	  <property name="taxonMatcher" ref="mapBackedTaxonMatcher"/>
	  <property name="filter" ref="naturalLanguageDatasetFilter"/>
	</bean>
	
	<bean id="naturalLanguageDatasetFilter" class="au.org.ala.delta.translation.naturallanguage.NaturalLanguageDataSetFilter" scope="step">
	  <constructor-arg value="#{deltaContextHolder.deltaContext}"/>
	</bean>
	
	<bean id="mapBackedTaxonMatcher" class="org.emonocot.job.delta.MapBackedTaxonMatcher"/>
	
	<bean id="deltaDescriptionFileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">
	  <property name="resource" ref="descriptionFile"/>
	  <property name="lineAggregator" ref="lineAggregator"/>
	</bean>

	<bean id="descriptionFile" class="org.springframework.core.io.FileSystemResource" scope="step">
		<constructor-arg type="java.io.File">
			<bean class="java.io.File" scope="step">
				<constructor-arg type="java.io.File" value="${harvester.output.directory}/#{jobParameters['archive.file']}"/>
				<constructor-arg type="java.lang.String" value="description.txt"/>
			</bean>
		</constructor-arg>
	</bean>
	
	<bean name="lineAggregator" class="org.springframework.batch.item.file.transform.DelimitedLineAggregator" scope="step">
	 <property name="delimiter" value="#{jobParameters['fields.terminated.by']}"/>
	 <property name="fieldExtractor">
	   <bean class="org.emonocot.job.dwc.write.DwcFieldExtractor" scope="step">
	     <property name="names" value="#{jobParameters['description.file.field.names']}"/>
	     <property name="quoteCharacter" value="#{jobParameters['fields.enclosed.by']}"/>
	     <property name="extension" value="http://rs.gbif.org/terms/1.0/Description"/>
	     <property name="conversionService" ref="conversionService"/>
	   </bean>
	 </property>
	</bean>
    
    
    <bean id="workingDirectoryResourceDeletingTasklet"
		class="org.emonocot.harvest.common.MultiResourceDeletingTasklet"
		scope="step">
		<property name="resources">
			<list>
				<bean class="org.springframework.core.io.FileSystemResource" scope="step">
					<constructor-arg value="${harvester.output.directory}/#{jobParameters['archive.file']}" />
				</bean>				
			</list>
		</property>
	</bean>
</beans>
