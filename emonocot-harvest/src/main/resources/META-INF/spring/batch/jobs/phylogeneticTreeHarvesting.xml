<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
	<context:property-placeholder ignore-resource-not-found="true" location="classpath*:META-INF/spring/application.properties,classpath*:META-INF/spring/database.properties,classpath*:META-INF/spring/emonocot-harvest.properties,classpath*:META-INF/spring/emonocot-harvest-db.properties"/>
	<context:annotation-config />

	<batch:job id="PhylogeneticTreeHarvesting">
		<batch:description>Harvests a single file containing a phylogenetic tree</batch:description>
		<batch:step id="setTemporaryFilename">
			<batch:description>Set the temporary file name</batch:description>
			<batch:tasklet ref="setTemporaryFilenameTasklet" />
			<batch:next on="COMPLETED" to="getPhylogeneticTree" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="getPhylogeneticTree">
			<batch:description>Get the tree file</batch:description>
			<batch:tasklet ref="getPhylogeneticTreeTasklet" />
			<batch:next on="NOT_MODIFIED" to="cleanupResourcesNotModified" />
			<batch:next on="COMPLETED" to="processPhylogeneticTree" />
			<batch:next on="FAILED" to="indexAnnotationsFailed"/>
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>		
		<batch:step id="processPhylogeneticTree">
		    <batch:description>Transform the PhylogeneticTree to PhyloXML</batch:description>
		    <batch:tasklet ref="phylogeneticTreeTransformingTasklet" />
		    <batch:next on="COMPLETED" to="indexAnnotations"/>
		    <batch:next on="FAILED" to="indexAnnotationsFailed"/>
		    <batch:listeners>
		        <batch:listener ref="stepStatusListener" />
		    </batch:listeners>
		</batch:step>		
		<batch:step id="cleanupResourcesNotModified">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="resourceDeletingTasklet" />
			<batch:end on="COMPLETE" exit-code="NOT_MODIFIED" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexAnnotations">
		  <batch:description>Index the annotations associated with this job</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexAnnotationsReader" writer="indexAnnotationsWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteOldAnnotations" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>			
		</batch:step>
		<batch:step id="deleteOldAnnotations">
		    <batch:description>Delete the annotations no longer associated with this job</batch:description>
		    <batch:tasklet>
				<batch:chunk reader="deleteAnnotationsReader" writer="deletingWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="cleanupResources" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="cleanupResources">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="resourceDeletingTasklet" />
			<batch:end on="COMPLETED" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="indexAnnotationsFailed">
		  <batch:description>Index the annotations associated with this job, given that it has failed</batch:description>
		  <batch:tasklet>
				<batch:chunk reader="indexAnnotationsReader" writer="indexAnnotationsWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteOldAnnotationsFailed" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>			
		</batch:step>
		<batch:step id="deleteOldAnnotationsFailed">
		    <batch:description>Delete the annotations no longer associated with this job</batch:description>
		    <batch:tasklet>
				<batch:chunk reader="deleteAnnotationsReader" writer="deletingWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:next on="COMPLETED" to="cleanupResourcesFailed" />
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:step id="cleanupResourcesFailed">
			<batch:description>Cleanup the resources, given that the job has failed</batch:description>
			<batch:tasklet ref="resourceDeletingTasklet" />
			<batch:end on="COMPLETED" exit-code="FAILED"/>
			<batch:listeners>
			    <batch:listener ref="stepStatusListener" />
			</batch:listeners>
		</batch:step>
		<batch:listeners>
		  <batch:listener ref="jobStatusListener"/>
		</batch:listeners>
	</batch:job>

	<bean id="setTemporaryFilenameTasklet" class="org.emonocot.harvest.common.SetTemporaryFilenameTasklet" scope="step">
		<property name="harvesterSpoolDirectory" value="${harvester.spool.directory}" />
		<property name="extension" value="#{jobParameters['input.file.extension']}" />
	</bean>

	<bean id="resourceDeletingTasklet"
		class="org.emonocot.harvest.common.MultiResourceDeletingTasklet"
		scope="step">
		<property name="resources">
			<list>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
				</bean>				
			</list>
		</property>
	</bean>

	<bean id="phylogeneticTreeTransformingTasklet" class="org.emonocot.job.phylo.PhylogeneticTreeTransformingTasklet"
		scope="step">
		<property name="inputFile">
			<bean class="org.springframework.core.io.FileSystemResource" scope="step">
				<constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
			</bean>
		</property>	
		<property name="rootTaxonIdentifier" value="#{jobParameters['root.taxon.identifier']}" />
		<property name="phylogenyTitle" value="#{jobParameters['phylogeny.title']}" />
		<property name="phylogenyCreator" value="#{jobParameters['phylogeny.creator']}" />
		<property name="phylogenyDescription" value="#{jobParameters['phylogeny.description']}" />
		<property name="phylogenyRights" value="#{jobParameters['phylogeny.rights']}" />
		<property name="phylogenyRightsHolder" value="#{jobParameters['phylogeny.rights.holder']}" />
		<property name="phylogenyLicense" value="#{jobParameters['phylogeny.license']}" />
		<property name="sourceName" value="#{jobParameters['authority.name']}" />
		<property name="treeIdentifier" value="#{jobParameters['authority.uri']}"/>
		<property name="baseUri" value="${portal.baseUrl}"/>
		<property name="taxonMatcher" ref="taxonMatcher" />
		<property name="phylogeneticTreeService" ref="phylogeneticTreeServiceImpl" />
		<property name="solrIndexingListener" ref="solrIndexingListener"/>
		<property name="taxonService" ref="taxonServiceImpl" />
		<property name="sessionFactory" ref="sessionFactory"/>
		<property name="transactionManager" ref="transactionManager"/>
	</bean>

	<bean id="getPhylogeneticTreeTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="getResourceClient" />
		<property name="targetMethod" value="getResource" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['authority.uri']}</value>
				<value>#{jobParameters['authority.last.harvested']}</value>
				<value>#{jobExecutionContext['temporary.file.name']}</value>
			</list>
		</property>
	</bean>
	
	<bean id="indexAnnotationsReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString" value="select a.id from Annotation a where a.jobId = :jobId" />
		<property name="parameterValues">
			<map>
				<entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
			</map>
		</property>
	</bean>
    
    <bean id="indexAnnotationsWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter">
      <property name="type" value="org.emonocot.model.Annotation" />
      <property name="sessionFactory" ref="sessionFactory" />
      <property name="solrIndexingListener" ref="solrIndexingListener" />
    </bean>
    
    <bean id="deleteAnnotationsReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
		scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString" value="select a from Annotation a join a.authority auth where a.jobId not in (select r.jobId from Resource r join r.organisation org where org.identifier = :authorityIdentifier) and auth.identifier = :authorityIdentifier" />
		<property name="parameterValues">
			<map>
			    <entry key="authorityIdentifier" value="#{jobParameters['authority.name']}"/>				
			</map>
		</property>
	</bean>
	
    <bean id="deletingWriter" class="org.emonocot.harvest.common.HibernateDeletingWriter">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

</beans>
