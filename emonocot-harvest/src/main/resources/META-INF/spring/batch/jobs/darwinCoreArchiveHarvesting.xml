<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
	                    
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:META-INF/spring/*.properties"/>
	<context:annotation-config />

	<batch:job id="DarwinCoreArchiveHarvesting">
	    <batch:description>Gets a Darwin Core Archive from a web-accessible URI, unpacks it in a local folder, reads the metadata, then imports the content</batch:description>
	    <batch:step id="setTemporaryFilenames">
			<batch:description>Set the temporary file names</batch:description>
			<batch:tasklet ref="setTemporaryFilenamesTasklet" />			
			<batch:next on="COMPLETED" to="getDWCArchive" />
		</batch:step>
		<batch:step id="getDWCArchive">
			<batch:description>Get the darwin core archive</batch:description>
			<batch:tasklet ref="getDWCArchiveTasklet" />
			<batch:next on="NOT MODIFIED" to="cleanupResourcesNotModified" />
			<batch:next on="COMPLETED" to="unpackDWCArchive" />
		</batch:step>
		<batch:step id="cleanupResourcesNotModified">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="dwcArchiveResourceDeletingTasklet" />
			<batch:end on="COMPLETE" exit-code="NOT MODIFIED" />
		</batch:step>
		<batch:step id="unpackDWCArchive">
			<batch:description>Unzip the archive to a temporary directory</batch:description>
			<batch:tasklet ref="unpackDWCArchiveTasklet" />
			<batch:next on="COMPLETED" to="readArchiveMetadata" />
		</batch:step>
		<batch:step id="readArchiveMetadata">
			<batch:description>Read the metadata from the archive and figure out how to interpret the files</batch:description>
			<batch:tasklet ref="readDWCArchiveMetadataTasklet" />
			<batch:next on="COMPLETED" to="checkTaxonProcessingMode" />
			<batch:listeners>
				<batch:listener ref="dwcArchiveMetadataReader" />
			</batch:listeners>
		</batch:step>
		<batch:decision decider="taxonProcessingModeDecider" id="checkTaxonProcessingMode">
		  <batch:next on="CHECK_TAXA" to="markTaxonRecords"/>
		  <batch:next on="IMPORT_TAXA" to="importCoreFile"/>
		</batch:decision>
		<batch:step id="markTaxonRecords">
	        <batch:description>Mark the taxon records we expect to be present in this archive</batch:description>
	        <batch:tasklet ref="markTaxonRecordsTasklet" />
			<batch:next on="COMPLETED" to="checkCoreFile" />
			<batch:listeners>
			  <batch:listener ref="taxonRecordAnnotator"/>
			</batch:listeners>
	    </batch:step>
		<batch:step id="checkCoreFile">
			<batch:description>Process the core file containing the taxa but only check the taxa, don't modify or create taxa</batch:description>
			<batch:tasklet>
				<batch:chunk reader="taxonReader" processor="taxonCheckingProcessor"
					writer="itemWriter" commit-interval="10" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="markDescriptionRecords" />
			<batch:listeners>
			  <batch:listener ref="processingExceptionProcessListener"/>
			  <batch:listener ref="taxonFieldSetMapper"/>
			  <batch:listener ref="taxonRelationshipResolver"/>
			  <batch:listener ref="hibernateSessionClearingChunkListener"/>
			</batch:listeners>
		</batch:step>
		<batch:step id="importCoreFile">
			<batch:description>Process the core file containing the taxa, creating and modifying where neccessary</batch:description>
			<batch:tasklet>
				<batch:chunk reader="taxonReader" processor="taxonImportingProcessor"
					writer="itemWriter" commit-interval="10" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="markDescriptionRecords" />
			<batch:listeners>
			  <batch:listener ref="processingExceptionProcessListener"/>
			  <batch:listener ref="taxonFieldSetMapper"/>
			  <batch:listener ref="taxonRelationshipResolver"/>
			  <batch:listener ref="taxonRelationshipResolver"/>
			  <batch:listener ref="hibernateSessionClearingChunkListener"/>
			</batch:listeners>		
		</batch:step>
		<batch:step id="markDescriptionRecords">
	        <batch:description>Mark the description records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
	        <batch:tasklet ref="markDescriptionRecordsTasklet" />
			<batch:next on="COMPLETED" to="processDescriptionDecision" />
			<batch:listeners>
			  <batch:listener ref="descriptionRecordAnnotator"/>
			</batch:listeners>
	    </batch:step>
		<batch:decision decider="processDescriptionDecider" id="processDescriptionDecision">
		  <batch:next on="DESCRIPTION_PRESENT" to="processDescriptionFile"/>
		  <batch:next on="DESCRIPTION_ABSENT" to="processImagesDecision"/>
		</batch:decision>		
		<batch:step id="processDescriptionFile">
			<batch:description>Process the extension file containing the descriptions</batch:description>
			<batch:tasklet>
				<batch:chunk reader="descriptionReader" processor="descriptionProcessor"
					writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="deleteAbsentDescriptions" />
			<batch:listeners>
			  <batch:listener ref="descriptionFieldSetMapper"/>
			  <batch:listener ref="processingExceptionProcessListener"/>
			  <batch:listener ref="hibernateSessionClearingChunkListener"/>
			</batch:listeners>
		</batch:step>
		<batch:step id="deleteAbsentDescriptions">
		  <batch:description>Process the extension file containing the descriptions</batch:description>
			<batch:tasklet>
				<batch:chunk reader="deleteDescriptionsReader"	writer="deletingWriter" commit-interval="100"/>				    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="processImagesDecision" />
			<batch:listeners>
			  <batch:listener ref="processingExceptionProcessListener"/>
			  <batch:listener ref="hibernateSessionClearingChunkListener"/>
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processImageDecider" id="processImagesDecision">
		  <batch:next on="IMAGE_PRESENT" to="processImageFile"/>
		  <batch:next on="IMAGE_ABSENT" to="processReferencesDecision"/>
		</batch:decision>
		<batch:step id="processImageFile">
			<batch:description>Process the extension file containing the images</batch:description>
			<batch:tasklet>
				<batch:chunk reader="imageReader" processor="imageProcessor"
					writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>	    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="handleBinaryImages" />
			<batch:listeners>			
			  <batch:listener ref="processingExceptionProcessListener"/>
			  <batch:listener ref="imageFieldSetMapper"/>
			  <batch:listener ref="imageProcessor"/>
			  <batch:listener ref="hibernateSessionClearingChunkListener"/>
			</batch:listeners>
		</batch:step>
		<batch:step id="handleBinaryImages">
			<batch:description>Retrieve images which are not cached, obtain EXIF metadata from the binary files
			  then resize the images
			</batch:description>
			<batch:tasklet>
				<batch:chunk reader="processImageFilesReader" processor="processImageFilesProcessor"
					writer="itemWriter" commit-interval="10">
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="processReferencesDecision" />
		</batch:step>
		<batch:decision decider="processReferenceDecider" id="processReferencesDecision">
		  <batch:next on="REFERENCE_PRESENT" to="processReferenceFile"/>
		  <batch:next on="REFERENCE_ABSENT" to="cleanupResources"/>
		</batch:decision>
		<batch:step id="processReferenceFile">
			<batch:description>Process the extension file containing the references</batch:description>
			<batch:tasklet>
				<batch:chunk reader="referenceReader" processor="referenceProcessor"
					writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="processIdentifiersDecision" />
			<batch:listeners>
			  <batch:listener ref="referenceFieldSetMapper"/>
			  <batch:listener ref="processingExceptionProcessListener"/>
			  <batch:listener ref="referenceProcessor"/>
			  <batch:listener ref="hibernateSessionClearingChunkListener"/>
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processIdentifierDecider" id="processIdentifiersDecision">
		  <batch:next on="IDENTIFIER_PRESENT" to="processIdentifierFile"/>
		  <batch:next on="IDENTIFIER_ABSENT" to="cleanupResources"/>
		</batch:decision>
		<batch:step id="processIdentifierFile">
			<batch:description>Process the extension file containing the identifiers</batch:description>
			<batch:tasklet>
				<batch:chunk reader="identifierReader" processor="identifierProcessor"
					writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="cleanupResources" />
			<batch:listeners>
			  <batch:listener ref="identifierFieldSetMapper"/>
			  <batch:listener ref="processingExceptionProcessListener"/>
			  <batch:listener ref="identifierProcessor"/>
			  <batch:listener ref="hibernateSessionClearingChunkListener"/>
			</batch:listeners>
		</batch:step>
	    <batch:step id="cleanupResources">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="dwcArchiveResourceDeletingTasklet" />
		</batch:step>
		<batch:listeners>
		  <batch:listener ref="jobStatusListener"/>
		</batch:listeners>	    
	</batch:job>
	
	<bean id="jobStatusListener" class="org.emonocot.harvest.common.JobStatusListener">
	  <property name="jobStatusNotifier" ref="jobStatusNotifier"/>
	  <property name="baseUrl" value="${harvester.baseUrl}"/>
	</bean>
	
	<bean id="setTemporaryFilenamesTasklet" class="org.emonocot.job.dwc.SetTemporaryFilenamesTasklet">
		<property name="harvesterSpoolDirectory" value="${harvester.spool.directory}"/>
	</bean>

	<bean id="dwcArchiveResourceDeletingTasklet"
		class="org.emonocot.harvest.common.MultiResourceDeletingTasklet"
		scope="step">
		<property name="resources">
			<list>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
				</bean>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobExecutionContext['unpack.directory.name']}" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="getDWCArchiveTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="getResourceClient" />
		<property name="targetMethod" value="getBinaryResource" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['authority.name']}</value>
				<value>#{jobParameters['authority.uri']}</value>
				<value>#{jobParameters['authority.last.harvested']}</value>
				<value>#{jobExecutionContext['temporary.file.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="unpackDWCArchiveTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="dwcArchiveUnpacker" />
		<property name="targetMethod" value="unpackArchive" />
		<property name="arguments">
			<list>
				<value>#{jobExecutionContext['temporary.file.name']}</value>
				<value>#{jobExecutionContext['unpack.directory.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="dwcArchiveUnpacker" class="org.emonocot.job.dwc.ArchiveUnpacker" />

	<bean id="readDWCArchiveMetadataTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="dwcArchiveMetadataReader" />
		<property name="targetMethod" value="readMetadata" />
		<property name="arguments">
			<list>
				<value>#{jobExecutionContext['unpack.directory.name']}</value>
				<value>#{jobParameters['authority.name']}</value>
				<value>#{jobParameters['taxon.processing.mode']}</value>
			</list>
		</property>
	</bean>

	<bean id="dwcArchiveMetadataReader" class="org.emonocot.job.dwc.ArchiveMetadataReader" />
	
	<!-- Taxa  -->
	
	<bean id="taxonProcessingModeDecider" class="org.emonocot.job.dwc.taxon.ProcessingModeDecider"/>
	
	<bean id="markTaxonRecordsTasklet"
          class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
          scope="step">
        <property name="targetObject" ref="taxonRecordAnnotator" />
        <property name="targetMethod" value="annotateRecords" />
     	<property name="arguments">
         <list>
          <value>#{jobParameters['family']}</value>
          <value>#{jobParameters['authority.name']}</value>
         </list>
        </property>
    </bean>
    
    <bean id="taxonRecordAnnotator" class="org.emonocot.job.dwc.taxon.RecordAnnotator">
       <property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="taxonReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="#{jobExecutionContext['dwca.core.encoding']}"/>
		<property name="linesToSkip" value="#{jobExecutionContext['dwca.core.ignoreHeaderLines']}"/>
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory"/>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.core.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="taxonLineMapper" />
	</bean>
	
	<bean id="taxonRelationshipResolver" class="org.emonocot.harvest.common.TaxonRelationshipResolverImpl" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	  <property name="taxonService" ref="taxonServiceImpl"/>
	</bean>
	
	<bean id="taxonImportingProcessor" class="org.emonocot.job.dwc.taxon.ImportingValidator" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	</bean>
	
	<bean id="taxonCheckingProcessor" class="org.emonocot.job.dwc.taxon.CheckingValidator" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	</bean>

	<bean id="taxonLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="taxonLineTokenizer" />
		<property name="fieldSetMapper" ref="taxonFieldSetMapper" />
	</bean>

	<bean id="taxonLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names" value="#{jobExecutionContext['dwca.core.fieldNames']}"/>			
		<property name="delimiter" value="#{jobExecutionContext['dwca.core.fieldsTerminatedBy']}"/>
		<property name="quoteCharacter" value="#{jobExecutionContext['dwca.core.fieldsEnclosedBy']}"/>
		<property name="strict" value="false"/>
	</bean>	
	
	<bean id="taxonFieldSetMapper" class="org.emonocot.job.dwc.taxon.FieldSetMapper"  scope="step">
	    <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	    <property name="fieldNames" value="#{jobExecutionContext['dwca.core.fieldNames']}"/>
		<property name="defaultValues" value="#{jobExecutionContext['dwca.core.defaultValues']}"/>
		<property name="taxonService" ref="taxonServiceImpl"/>
		<property name="sourceService" ref="sourceServiceImpl"/>
	</bean>
	
	<!-- Descriptions -->
	
	<bean id="processDescriptionDecider" class="org.emonocot.job.dwc.description.ProcessingDecider"/>
	
	<bean id="markDescriptionRecordsTasklet"
          class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
          scope="step">
        <property name="targetObject" ref="descriptionRecordAnnotator" />
        <property name="targetMethod" value="annotateRecords" />
     	<property name="arguments">
         <list>
          <value>#{jobParameters['authority.name']}</value>
         </list>
        </property>
    </bean>
    
    <bean id="descriptionRecordAnnotator" class="org.emonocot.job.dwc.description.RecordAnnotator">
       <property name="dataSource" ref="dataSource"/>
	</bean>
	
	<bean id="descriptionReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="#{jobExecutionContext['dwca.description.encoding']}"/>
		<property name="linesToSkip" value="#{jobExecutionContext['dwca.description.ignoreHeaderLines']}"/>
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory"/>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.description.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="descriptionLineMapper" />
	</bean>

	<bean id="descriptionProcessor" class="org.emonocot.job.dwc.description.Validator" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	  <property name="family" value="#{jobParameters['family']}"/>
	</bean>

	<bean id="descriptionLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="descriptionLineTokenizer" />
		<property name="fieldSetMapper" ref="descriptionFieldSetMapper" />
	</bean>

	<bean id="descriptionLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names" value="#{jobExecutionContext['dwca.description.fieldNames']}"/>
		<property name="delimiter" value="#{jobExecutionContext['dwca.description.fieldsTerminatedBy']}"/>
		<property name="quoteCharacter" value="#{jobExecutionContext['dwca.description.fieldsEnclosedBy']}"/>
		<property name="strict" value="false"/>
	</bean>

	<bean id="descriptionFieldSetMapper" class="org.emonocot.job.dwc.description.FieldSetMapper"  scope="step">
	    <property name="fieldNames" value="#{jobExecutionContext['dwca.description.fieldNames']}"/>
		<property name="defaultValues" value="#{jobExecutionContext['dwca.description.defaultValues']}"/>
		<property name="taxonService" ref="taxonServiceImpl"/>
		<property name="referenceService" ref="referenceServiceImpl"/>
		<property name="sourceService" ref="sourceServiceImpl"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}"/>
	</bean>
	
	<bean id="deleteDescriptionsReader" class="org.springframework.batch.item.database.HibernateCursorItemReader" scope="step">
	  <property name="sessionFactory" ref="sessionFactory" />	  
	  <property name="queryString" value="select d from TextContent d join d.annotations a where a.jobId = :jobId and a.code = :code"/>
	  <property name="parameterValues">
	    <map>
	     <entry key="jobId" value="#{jobExecutionContext['job.execution.id']}"/>
	     <entry key="code" value="#{T(org.emonocot.model.common.AnnotationCode).Absent}"/>
	    </map>
	  </property>
	</bean>
	
	<!-- Images -->
	
	<bean id="processImageDecider" class="org.emonocot.job.dwc.image.ProcessingDecider"/>
	
	<bean id="imageReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="#{jobExecutionContext['dwca.image.encoding']}"/>
		<property name="linesToSkip" value="#{jobExecutionContext['dwca.image.ignoreHeaderLines']}"/>
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory"/>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.image.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="imageLineMapper" />
	</bean>

	<bean id="imageProcessor" class="org.emonocot.job.dwc.image.Validator" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	  <property name="family" value="#{jobParameters['family']}"/>
	</bean>

	<bean id="imageLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="imageLineTokenizer" />
		<property name="fieldSetMapper" ref="imageFieldSetMapper" />
	</bean>

	<bean id="imageLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names" value="#{jobExecutionContext['dwca.image.fieldNames']}"/>
		<property name="quoteCharacter" value="#{jobExecutionContext['dwca.core.fieldsEnclosedBy']}"/>	
		<property name="delimiter" value="#{jobExecutionContext['dwca.image.fieldsTerminatedBy']}"/>
		<property name="strict" value="false"/>
	</bean>

	<bean id="imageFieldSetMapper" class="org.emonocot.job.dwc.image.FieldSetMapper"  scope="step">
	    <property name="fieldNames" value="#{jobExecutionContext['dwca.image.fieldNames']}"/>			
		<property name="defaultValues" value="#{jobExecutionContext['dwca.image.defaultValues']}"/>
		<property name="taxonService" ref="taxonServiceImpl"/>
		<property name="sourceService" ref="sourceServiceImpl"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}"/>
	</bean>
	
	<bean id="processImageFilesReader" class="org.springframework.batch.item.database.HibernateCursorItemReader" scope="step">
	  <property name="sessionFactory" ref="sessionFactory" />	  
	  <property name="queryString" value="select i from Image i join i.authority a where a.identifier = :authority"/>
	  <property name="parameterValues">
	    <map>
	     <entry key="authority" value="#{jobParameters['authority.name']}"/>
	    </map>
	  </property>
	</bean>
	
	<bean id="processImageFilesProcessor" class="org.springframework.batch.item.support.CompositeItemProcessor">
	  <property name="delegates">
	    <list>
	      <ref bean="resizeImagesProcessor"/>
	      <ref bean="imageMetadataProcessor"/>
	    </list>
	  </property>
	</bean>
	
	<!-- References -->
	
	<bean id="processReferenceDecider" class="org.emonocot.job.dwc.reference.ProcessingDecider"/>
	
	<bean id="referenceReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="#{jobExecutionContext['dwca.reference.encoding']}"/>
		<property name="linesToSkip" value="#{jobExecutionContext['dwca.reference.ignoreHeaderLines']}"/>
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory"/>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.reference.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="referenceLineMapper" />
	</bean>

	<bean id="referenceProcessor" class="org.emonocot.job.dwc.reference.Validator" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	  <property name="family" value="#{jobParameters['family']}"/>
	</bean>

	<bean id="referenceLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="referenceLineTokenizer" />
		<property name="fieldSetMapper" ref="referenceFieldSetMapper" />
	</bean>

	<bean id="referenceLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names" value="#{jobExecutionContext['dwca.reference.fieldNames']}"/>			
		<property name="delimiter" value="#{jobExecutionContext['dwca.reference.fieldsTerminatedBy']}"/>
		<property name="quoteCharacter" value="#{jobExecutionContext['dwca.reference.fieldsEnclosedBy']}"/>		
		<property name="strict" value="false"/>
	</bean>

	<bean id="referenceFieldSetMapper" class="org.emonocot.job.dwc.reference.FieldSetMapper"  scope="step">
	    <property name="fieldNames"  value="#{jobExecutionContext['dwca.reference.fieldNames']}"/>
		<property name="defaultValues" value="#{jobExecutionContext['dwca.reference.defaultValues']}"/>
		<property name="taxonService" ref="taxonServiceImpl"/>
		<property name="sourceService" ref="sourceServiceImpl"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}"/>
	</bean>
	
	<!-- Identifiers -->
	
	<bean id="processIdentifierDecider" class="org.emonocot.job.dwc.identifier.ProcessingDecider"/>
	
	<bean id="identifierReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="#{jobExecutionContext['dwca.identifier.encoding']}"/>
		<property name="linesToSkip" value="#{jobExecutionContext['dwca.identifier.ignoreHeaderLines']}"/>
		<property name="bufferedReaderFactory" ref="bufferedReaderFactory"/>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.identifier.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="identifierLineMapper" />
	</bean>

	<bean id="identifierProcessor" class="org.emonocot.job.dwc.identifier.Validator" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	  <property name="family" value="#{jobParameters['family']}"/>
	  <property name="pdfClient" ref="pdfClient"/>
	  <property name="bhlClient" ref="bhlClient"/>
	</bean>
	
	<bean id="pdfClient" class="org.emonocot.ws.PdfProtologClient">
	    <property name="proxyHost" value="${http.proxyHost}" />
		<property name="proxyPort" value="${http.proxyPort}" />
	</bean>
	
	<bean id="bhlClient" class="org.emonocot.ws.BhlProtologClient">
	    <property name="proxyHost" value="${http.proxyHost}" />
		<property name="proxyPort" value="${http.proxyPort}" />
	</bean>

	<bean id="identifierLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="identifierLineTokenizer" />
		<property name="fieldSetMapper" ref="identifierFieldSetMapper" />
	</bean>

	<bean id="identifierLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names" value="#{jobExecutionContext['dwca.identifier.fieldNames']}"/>			
		<property name="delimiter" value="#{jobExecutionContext['dwca.identifier.fieldsTerminatedBy']}"/>
		<property name="quoteCharacter" value="#{jobExecutionContext['dwca.identifier.fieldsEnclosedBy']}"/>		
		<property name="strict" value="false"/>
	</bean>

	<bean id="identifierFieldSetMapper" class="org.emonocot.job.dwc.identifier.FieldSetMapper"  scope="step">
	    <property name="fieldNames"  value="#{jobExecutionContext['dwca.identifier.fieldNames']}"/>
		<property name="defaultValues" value="#{jobExecutionContext['dwca.identifier.defaultValues']}"/>
		<property name="taxonService" ref="taxonServiceImpl"/>
		<property name="sourceService" ref="sourceServiceImpl"/>
		<property name="sourceName" value="#{jobParameters['authority.name']}"/>
	</bean>
	
	<!-- Writing -->
	<bean id="processingExceptionProcessListener" class="org.emonocot.job.dwc.DwCProcessingExceptionProcessListener" scope="step">
	  <property name="sourceName" value="#{jobParameters['authority.name']}"/>
	  <property name="hibernateSessionFactory" ref="sessionFactory"/>
	  <property name="transactionManager" ref="transactionManager"/>
	</bean>

	<bean id="itemWriter"
		class="org.springframework.batch.item.database.HibernateItemWriter">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="clearSession" value="false"/>
	</bean>
	
    <bean id="deletingWriter" class="org.emonocot.harvest.common.HibernateDeletingWriter">
	  <property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="hibernateSessionClearingChunkListener" class="org.emonocot.harvest.common.HibernateSessionClearingChunkListener"/>
</beans>
