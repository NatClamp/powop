<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
	                    
    <context:property-placeholder ignore-unresolvable="true" location="classpath:application.properties"/>
	<context:annotation-config />

	<batch:job id="DarwinCoreArchiveHarvesting">
	    <batch:description>Gets a Darwin Core Archive from a web-accessible URI, unpacks it in a local folder, reads the metadata, then imports the content</batch:description>
		<batch:step id="getDWCArchive">
			<batch:description>Get the darwin core archive</batch:description>
			<batch:tasklet ref="getDWCArchiveTasklet" />
			<batch:next on="NOT MODIFIED" to="cleanupResourcesNotModified" />
			<batch:next on="COMPLETED" to="markTaxonRecords" />
		</batch:step>
		<batch:step id="cleanupResourcesNotModified">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="dwcArchiveResourceDeletingTasklet" />
			<batch:end on="COMPLETE" exit-code="NOT MODIFIED" />
		</batch:step>
		<batch:step id="markTaxonRecords">
	        <batch:description>Mark the taxon records we expect to be present in this archive</batch:description>
	        <batch:tasklet ref="markTaxonRecordsTasklet" />
			<batch:next on="COMPLETED" to="unpackDWCArchive" />
			<batch:listeners>
			  <batch:listener ref="recordAnnotator"/>
			</batch:listeners>
	    </batch:step>
		<batch:step id="unpackDWCArchive">
			<batch:description>Unzip the archive to a temporary directory</batch:description>
			<batch:tasklet ref="unpackDWCArchiveTasklet" />
			<batch:next on="COMPLETED" to="readArchiveMetadata" />
		</batch:step>
		<batch:step id="readArchiveMetadata">
			<batch:description>Read the metadata from the archive and figure out how to interpret the files</batch:description>
			<batch:tasklet ref="readDWCArchiveMetadataTasklet" />
			<batch:next on="COMPLETED" to="processCoreFile" />
			<batch:listeners>
				<batch:listener ref="dwcArchiveMetadataReader" />
			</batch:listeners>
		</batch:step>
		<batch:step id="processCoreFile">
			<batch:description>Process the core file containing the taxa</batch:description>
			<batch:tasklet>
				<batch:chunk reader="taxonReader" processor="taxonProcessor"
					writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="processDescriptionDecision" />
			<batch:listeners>
			  <batch:listener ref="processingExceptionProcessListener"/>
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processDescriptionDecider" id="processDescriptionDecision">
		  <batch:next on="DESCRIPTION_PRESENT" to="processDescriptionFile"/>
		  <batch:next on="DESCRIPTION_ABSENT" to="processImagesDecision"/>
		</batch:decision>
		<batch:step id="processDescriptionFile">
			<batch:description>Process the extension file containing the descriptions</batch:description>
			<batch:tasklet>
				<batch:chunk reader="descriptionReader" processor="descriptionProcessor"
					writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="processImagesDecision" />
			<batch:listeners>
			  <batch:listener ref="processingExceptionProcessListener"/>
			</batch:listeners>
		</batch:step>
		<batch:decision decider="processImageDecider" id="processImagesDecision">
		  <batch:next on="IMAGE_PRESENT" to="processImageFile"/>
		  <batch:next on="IMAGE_ABSENT" to="cleanupResources"/>
		</batch:decision>
		<batch:step id="processImageFile">
			<batch:description>Process the extension file containing the images</batch:description>
			<batch:tasklet>
				<batch:chunk reader="imageReader" processor="imageProcessor"
					writer="itemWriter" commit-interval="100" skip-limit="10000">
					<batch:skippable-exception-classes>
                      <batch:include class="org.emonocot.job.dwc.DarwinCoreProcessingException"/>
                      <batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
                    </batch:skippable-exception-classes>
				</batch:chunk>			    
			</batch:tasklet>
			<batch:next on="COMPLETED" to="cleanupResources" />
			<batch:listeners>
			  <batch:listener ref="processingExceptionProcessListener"/>
			</batch:listeners>
		</batch:step>
	    <batch:step id="cleanupResources">
			<batch:description>Cleanup the resources</batch:description>
			<batch:tasklet ref="dwcArchiveResourceDeletingTasklet" />
		</batch:step>
	</batch:job>

	<bean id="dwcArchiveResourceDeletingTasklet"
		class="org.emonocot.harvest.common.MultiResourceDeletingTasklet"
		scope="step">
		<property name="resources">
			<list>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobParameters['temporary.file.name']}" />
				</bean>
				<bean class="org.springframework.core.io.FileSystemResource"
					scope="step">
					<constructor-arg value="#{jobParameters['unpack.directory.name']}" />
				</bean>
			</list>
		</property>
	</bean>
	
	<bean id="markTaxonRecordsTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="recordAnnotator" />
		<property name="targetMethod" value="annotateRecords" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['family']}</value>
				<value>#{jobParameters['authority.name']}</value>
			</list>
		</property>
	</bean>
	
	<bean id="recordAnnotator" class="org.emonocot.job.dwc.RecordAnnotator">
	  <property name="dataSource" ref="dataSource"/>
	</bean>

	<bean id="getDWCArchiveTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="getResourceClient" />
		<property name="targetMethod" value="getBinaryResource" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['authority.name']}</value>
				<value>#{jobParameters['authority.uri']}</value>
				<value>#{jobParameters['authority.last.harvested']}</value>
				<value>#{jobParameters['temporary.file.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="getResourceClient" class="org.emonocot.ws.GetResourceClient">
	    <property name="proxyHost" value="${http.proxyHost}" />
		<property name="proxyPort" value="${http.proxyPort}" />
	</bean>

	<bean id="unpackDWCArchiveTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="dwcArchiveUnpacker" />
		<property name="targetMethod" value="unpackArchive" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['temporary.file.name']}</value>
				<value>#{jobParameters['unpack.directory.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="dwcArchiveUnpacker" class="org.emonocot.job.dwc.ArchiveUnpacker" />

	<bean id="readDWCArchiveMetadataTasklet"
		class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
		scope="step">
		<property name="targetObject" ref="dwcArchiveMetadataReader" />
		<property name="targetMethod" value="readMetadata" />
		<property name="arguments">
			<list>
				<value>#{jobParameters['unpack.directory.name']}</value>
			</list>
		</property>
	</bean>

	<bean id="dwcArchiveMetadataReader" class="org.emonocot.job.dwc.ArchiveMetadataReader">
		<property name="archiveFactory" ref="archiveFactory" />
	</bean>

	<bean id="archiveFactory" class="org.gbif.dwc.text.ArchiveFactory" />

	<bean id="taxonReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding">
			<value>#{jobExecutionContext['dwca.core.encoding']}</value>
		</property>
		<property name="linesToSkip">
			<value>#{jobExecutionContext['dwca.core.ignoreHeaderLines']}</value>
		</property>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.core.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="taxonLineMapper" />
	</bean>

	<bean id="taxonProcessor" class="org.emonocot.job.dwc.taxon.TaxonValidator" scope="step">
	  <property name="authorityName" value="#{jobParameters['authority.name']}"/>
	</bean>

	<bean id="taxonLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="taxonLineTokenizer" />
		<property name="fieldSetMapper" ref="taxonFieldSetMapper" />
	</bean>

	<bean id="taxonLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names">
			<value>#{jobExecutionContext['dwca.core.fieldNames']}</value>
		</property>
		<property name="delimiter">
			<value>#{jobExecutionContext['dwca.core.fieldsTerminatedBy']}</value>
		</property>
		<property name="strict" value="false"/>
	</bean>

	<bean id="taxonFieldSetMapper" class="org.emonocot.job.dwc.taxon.TaxonFieldSetMapper"  scope="step">
	    <property name="fieldNames">
			<value>#{jobExecutionContext['dwca.core.fieldNames']}</value>
		</property>
		<property name="defaultValues">
			<value>#{jobExecutionContext['dwca.core.defaultValues']}</value>
		</property>
		<property name="taxonService" ref="taxonServiceImpl"/>
	</bean>
	
	<!-- Descriptions -->
	
	<bean id="processDescriptionDecider" class="org.emonocot.job.dwc.description.ProcessDescriptionDecider"/>
	
	<bean id="descriptionReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding">
			<value>#{jobExecutionContext['dwca.description.encoding']}</value>
		</property>
		<property name="linesToSkip">
			<value>#{jobExecutionContext['dwca.description.ignoreHeaderLines']}</value>
		</property>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.description.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="descriptionLineMapper" />
	</bean>

	<bean id="descriptionProcessor" class="org.emonocot.job.dwc.description.DescriptionValidator" />

	<bean id="descriptionLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="descriptionLineTokenizer" />
		<property name="fieldSetMapper" ref="descriptionFieldSetMapper" />
	</bean>

	<bean id="descriptionLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names">
			<value>#{jobExecutionContext['dwca.description.fieldNames']}</value>
		</property>
		<property name="delimiter">
			<value>#{jobExecutionContext['dwca.description.fieldsTerminatedBy']}</value>
		</property>
		<property name="strict" value="false"/>
	</bean>

	<bean id="descriptionFieldSetMapper" class="org.emonocot.job.dwc.description.DescriptionFieldSetMapper"  scope="step">
	    <property name="fieldNames">
			<value>#{jobExecutionContext['dwca.description.fieldNames']}</value>
		</property>
		<property name="defaultValues">
			<value>#{jobExecutionContext['dwca.description.defaultValues']}</value>
		</property>
		<property name="taxonService" ref="taxonServiceImpl"/>
	</bean>
	
	<!-- Images -->
	
	<bean id="processImageDecider" class="org.emonocot.job.dwc.image.ProcessImageDecider"/>
	
	<bean id="imageReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding">
			<value>#{jobExecutionContext['dwca.image.encoding']}</value>
		</property>
		<property name="linesToSkip">
			<value>#{jobExecutionContext['dwca.image.ignoreHeaderLines']}</value>
		</property>
		<property name="resource">
			<bean class="org.springframework.core.io.FileSystemResource"
				scope="step">
				<constructor-arg value="#{jobExecutionContext['dwca.image.file']}" />
			</bean>
		</property>
		<property name="lineMapper" ref="imageLineMapper" />
	</bean>

	<bean id="imageProcessor" class="org.emonocot.job.dwc.image.ImageValidator" />

	<bean id="imageLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper"
		scope="step">
		<property name="lineTokenizer" ref="imageLineTokenizer" />
		<property name="fieldSetMapper" ref="imageFieldSetMapper" />
	</bean>

	<bean id="imageLineTokenizer"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
		scope="step">
		<property name="names">
			<value>#{jobExecutionContext['dwca.image.fieldNames']}</value>
		</property>
		<property name="delimiter">
			<value>#{jobExecutionContext['dwca.image.fieldsTerminatedBy']}</value>
		</property>
		<property name="strict" value="false"/>
	</bean>

	<bean id="imageFieldSetMapper" class="org.emonocot.job.dwc.image.ImageFieldSetMapper"  scope="step">
	    <property name="fieldNames">
			<value>#{jobExecutionContext['dwca.image.fieldNames']}</value>
		</property>
		<property name="defaultValues">
			<value>#{jobExecutionContext['dwca.image.defaultValues']}</value>
		</property>
		<property name="taxonService" ref="taxonServiceImpl"/>
	</bean>
	
	<!-- Writing -->
	<bean id="processingExceptionProcessListener" class="org.emonocot.job.dwc.DwCProcessingExceptionProcessListener" scope="step">
	  <property name="authorityName" value="#{jobParameters['authority.name']}"/>
	  <property name="hibernateSessionFactory" ref="sessionFactory"/>
	  <property name="transactionManager" ref="transactionManager"/>
	</bean>

	<bean id="itemWriter"
		class="org.springframework.batch.item.database.HibernateItemWriter">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
</beans>
