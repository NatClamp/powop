<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:batch="http://www.springframework.org/schema/batch"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

  <context:property-placeholder ignore-resource-not-found="true" location="classpath*:META-INF/spring/application.properties,classpath*:META-INF/spring/database.properties,classpath*:META-INF/spring/emonocot-harvest.properties,classpath*:META-INF/spring/emonocot-harvest-db.properties"/>
  <context:annotation-config />

  <batch:job id="IUCNImport">
    <batch:description>Imports the IUCN json file</batch:description>
    <batch:step id="setTemporaryFilenames">
      <batch:description>Set the temporary file name</batch:description>
      <batch:tasklet ref="setTemporaryFilenamesTasklet" />
      <batch:next on="COMPLETED" to="getIUCNData" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="getIUCNData">
      <batch:description>Get the IUCN json file</batch:description>
      <batch:tasklet ref="getIUCNDataTasklet" />
      <batch:next on="NOT_MODIFIED" to="cleanupResourcesNotModified" />
      <batch:next on="COMPLETED" to="markMeasurementOrFactRecords" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="cleanupResourcesNotModified">
      <batch:description>Cleanup the resources</batch:description>
      <batch:tasklet ref="iucnResourceDeletingTasklet" />
      <batch:end on="COMPLETE" exit-code="NOT_MODIFIED" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="markMeasurementOrFactRecords">
      <batch:description>Mark the measurement or fact records we expect to be present in this archive (based on what we have previously harvested)</batch:description>
      <batch:tasklet ref="markMeasurementOrFactRecordsTasklet" />
      <batch:next on="COMPLETED" to="checkEmptyResponse" />
      <batch:listeners>
        <batch:listener ref="markMeasurementOrFactRecordsTasklet" />
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="checkEmptyResponse">
      <batch:description>The JSON file from the IUCN</batch:description>
      <batch:tasklet ref="checkEmptyResponseTasklet" />
      <batch:next on="EMPTY_RESPONSE" to="deleteAbsentMeasurementOrFacts" />
      <batch:next on="COMPLETED" to="splitJsonFile" />
      <batch:next on="FAILED" to="indexAnnotationsFailed"/>
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="splitJsonFile">
      <batch:description>The JSON file from the IUCN</batch:description>
      <batch:tasklet ref="splitOneLineJsonTasklet" />
      <batch:next on="COMPLETED" to="processFile" />
      <batch:next on="FAILED" to="indexAnnotationsFailed"/>
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="processFile">
      <batch:description>Process the specified file and check for matches</batch:description>
      <batch:tasklet>
        <batch:chunk reader="fileReader" processor="iucnProcessor"	writer="itemWriter" commit-interval="10" skip-limit="100">
          <batch:skippable-exception-classes>
            <batch:include class="org.emonocot.job.dwc.exception.DarwinCoreProcessingException" />
          </batch:skippable-exception-classes>
        </batch:chunk>
      </batch:tasklet>
      <batch:next on="COMPLETED" to="deleteAbsentMeasurementOrFacts"/>
      <batch:next on="FAILED" to="indexAnnotationsFailed"/>
      <batch:listeners>
        <batch:listener ref="measurementOrFactProcessor"/>
        <batch:listener ref="iucnMapToMeasurementOrFactProcessor"/>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="deleteAbsentMeasurementOrFacts">
      <batch:description>Delete the measurement or facts which we expected to be present in the json file but which were absent</batch:description>
      <batch:tasklet>
        <batch:chunk reader="deleteMeasurementOrFactReader" writer="deletingWriter"	commit-interval="100" />
      </batch:tasklet>
      <batch:next on="COMPLETED" to="indexTaxa" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="indexTaxa">
      <batch:description>Index the taxa associated with this job</batch:description>
      <batch:tasklet>
        <batch:chunk reader="indexTaxaReader" writer="indexTaxaWriter" commit-interval="10" />
      </batch:tasklet>
      <batch:next on="COMPLETED" to="indexAnnotations" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="indexAnnotations">
      <batch:description>Index the annotations associated with this job</batch:description>
      <batch:tasklet>
        <batch:chunk reader="indexAnnotationsReader" writer="indexAnnotationsWriter" commit-interval="10" />
      </batch:tasklet>
      <batch:next on="COMPLETED" to="deleteOldAnnotations" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="deleteOldAnnotations">
      <batch:description>Delete the annotations no longer associated with this job</batch:description>
      <batch:tasklet>
        <batch:chunk reader="deleteAnnotationsReader" writer="deletingWriter" commit-interval="10" />
      </batch:tasklet>
      <batch:next on="COMPLETED" to="cleanupResources" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="cleanupResources">
      <batch:description>Cleanup the resources</batch:description>
      <batch:tasklet ref="iucnResourceDeletingTasklet" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="indexAnnotationsFailed">
      <batch:description>Index the annotations associated with this job, given that it has failed</batch:description>
      <batch:tasklet>
        <batch:chunk reader="indexAnnotationsReader" writer="indexAnnotationsWriter" commit-interval="10" />
      </batch:tasklet>
      <batch:next on="COMPLETED" to="deleteOldAnnotationsFailed" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="deleteOldAnnotationsFailed">
      <batch:description>Delete the annotations no longer associated with this job</batch:description>
      <batch:tasklet>
        <batch:chunk reader="deleteAnnotationsReader" writer="deletingWriter" commit-interval="10" />
      </batch:tasklet>
      <batch:next on="COMPLETED" to="cleanupResourcesFailed" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:step id="cleanupResourcesFailed">
      <batch:description>Cleanup the resources given that the job failed</batch:description>
      <batch:tasklet ref="iucnResourceDeletingTasklet" />
      <batch:end on="COMPLETED" exit-code="FAILED" />
      <batch:listeners>
        <batch:listener ref="stepStatusListener" />
      </batch:listeners>
    </batch:step>
    <batch:listeners>
      <batch:listener ref="jobStatusListener" />
        </batch:listeners>
  </batch:job>

  <bean id="setTemporaryFilenamesTasklet" class="org.emonocot.job.iucn.SetTemporaryFilenamesTasklet" scope="step">
    <property name="harvesterSpoolDirectory" value="${harvester.spool.directory}"/>
    <property name="family" value="#{jobParameters['family']}"/>
    <property name="subfamily" value="#{jobParameters['subfamily']}"/>
    <property name="tribe" value="#{jobParameters['tribe']}"/>
    <property name="subtribe" value="#{jobParameters['subtribe']}"/>
  </bean>

  <bean id="markMeasurementOrFactRecordsTasklet"	class="org.emonocot.job.dwc.read.OwnedRecordAnnotator" scope="step">
    <property name="dataSource" ref="dataSource" />
    <property name="authorityName" value="#{jobParameters['authority.name']}" />
    <property name="annotatedObjType" value="MeasurementOrFact" />
    <property name="family" value="#{jobParameters['family']}" />
    <property name="subfamily" value="#{jobParameters['subfamily']}" />
    <property name="tribe" value="#{jobParameters['tribe']}" />
    <property name="subtribe" value="#{jobParameters['subtribe']}" />
  </bean>

  <bean id="checkEmptyResponseTasklet" class="org.emonocot.job.iucn.CheckEmptyResponseTasklet">
    <property name="inputFile">
      <bean class="org.springframework.core.io.FileSystemResource" scope="step">
        <constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
      </bean>
    </property>
  </bean>

  <bean id="splitOneLineJsonTasklet" class="org.emonocot.job.iucn.SplitOneLineJsonFileTasklet">
    <property name="inputFile">
      <bean class="org.springframework.core.io.FileSystemResource" scope="step">
        <constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
      </bean>
    </property>
    <property name="outputFile">
      <bean class="org.springframework.core.io.FileSystemResource" scope="step">
        <constructor-arg value="#{jobExecutionContext['split.file.name']}" />
      </bean>
    </property>
  </bean>

  <bean id="getIUCNDataTasklet"
    class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
    scope="step">
    <property name="targetObject" ref="getResourceClient" />
    <property name="targetMethod" value="getBinaryResource" />
    <property name="arguments">
      <list>
        <value>#{jobParameters['authority.uri']}</value>
        <value>#{jobParameters['authority.last.harvested']}</value>
        <value>#{jobExecutionContext['temporary.file.name']}</value>
      </list>
    </property>
  </bean>

  <bean id="fileReader" class="org.springframework.batch.item.file.FlatFileItemReader"
    scope="step">
    <property name="encoding" value="UTF-8" />
    <property name="linesToSkip" value="0" />
    <property name="recordSeparatorPolicy">
      <bean class="org.springframework.batch.item.file.separator.JsonRecordSeparatorPolicy"/>
    </property>
    <property name="resource">
      <bean class="org.springframework.core.io.FileSystemResource" scope="step">
        <constructor-arg value="#{jobExecutionContext['split.file.name']}" />
      </bean>
    </property>
    <property name="lineMapper">
      <bean class="org.emonocot.harvest.common.Jackson2JsonLineMapper"/>
    </property>
  </bean>

  <bean id="itemWriter" class="org.springframework.batch.item.database.HibernateItemWriter">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>

  <bean id="iucnMapToMeasurementOrFactProcessor" class="org.emonocot.job.iucn.Processor" scope="step">
    <property name="taxonMatcher" ref="taxonMatcher" />
    <property name="nameParser" ref="nameParser"/>
    <property name="sessionFactory" ref="sessionFactory"/>
    <property name="transactionManager" ref="transactionManager"/>
    <property name="sourceName" value="#{jobParameters['authority.name']}" />
    <property name="license" value="#{jobParameters['license']}" />
    <property name="rights" value="#{jobParameters['rights']}" />
    <property name="rightsHolder" value="#{jobParameters['rightsHolder']}" />
    <property name="accessRights" value="#{jobParameters['accessRights']}" />
    <property name="bibliographicCitation" value="#{jobParameters['bibliographicCitation']}" />
    <property name="iucnWebsiteUri" value="#{jobParameters['iucnWebsiteUri']}" />
  </bean>

  <bean id="measurementOrFactProcessor" class="org.emonocot.job.dwc.measurementorfact.Processor"
    scope="step">
    <property name="measurementOrFactService" ref="measurementOrFactServiceImpl" />
    <property name="sourceName" value="#{jobParameters['authority.name']}" />
    <property name="family" value="#{jobParameters['family']}" />
    <property name="subfamily" value="#{jobParameters['subfamily']}" />
    <property name="tribe" value="#{jobParameters['tribe']}" />
    <property name="subtribe" value="#{jobParameters['subtribe']}" />
  </bean>

  <bean id="iucnProcessor" class="org.springframework.batch.item.support.CompositeItemProcessor">
    <property name="delegates">
      <list>
        <ref bean="iucnMapToMeasurementOrFactProcessor"/>
        <ref bean="measurementOrFactProcessor"/>
      </list>
    </property>
  </bean>

  <bean id="deleteMeasurementOrFactReader"
    class="org.springframework.batch.item.database.HibernateCursorItemReader"
    scope="step">
    <property name="sessionFactory" ref="sessionFactory" />
    <property name="queryString"
      value="select m from MeasurementOrFact m join m.annotations a where a.jobId = :jobId and a.code = :code" />
    <property name="parameterValues">
      <map>
        <entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
        <entry key="code"
          value="#{T(org.emonocot.model.constants.AnnotationCode).Absent}" />
      </map>
    </property>
  </bean>

  <bean id="deletingWriter" class="org.emonocot.harvest.common.HibernateDeletingWriter">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>

  <bean id="indexTaxaReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
    scope="step">
    <property name="sessionFactory" ref="sessionFactory" />
    <property name="queryString" value="#{jobExecutionContext['index.taxon.query']}" />
    <property name="parameterValues">
      <map>
        <entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
        <entry key="subsetValue" value="#{jobExecutionContext['index.taxon.subset.value']}" />
      </map>
    </property>
  </bean>

  <bean id="indexTaxaWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter">
    <property name="type" value="org.emonocot.model.Taxon" />
    <property name="sessionFactory" ref="sessionFactory" />
    <property name="solrIndexingListener" ref="solrIndexingListener" />
  </bean>

  <bean id="indexAnnotationsReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
    scope="step">
    <property name="sessionFactory" ref="sessionFactory" />
    <property name="queryString" value="select a.id from Annotation a where a.jobId = :jobId" />
    <property name="parameterValues">
      <map>
        <entry key="jobId" value="#{jobExecutionContext['job.execution.id']}" />
      </map>
    </property>
  </bean>

  <bean id="indexAnnotationsWriter"  class="org.emonocot.harvest.common.SolrIndexingWriter">
    <property name="type" value="org.emonocot.model.Annotation" />
    <property name="sessionFactory" ref="sessionFactory" />
    <property name="solrIndexingListener" ref="solrIndexingListener" />
  </bean>

  <bean id="deleteAnnotationsReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"
    scope="step">
    <property name="sessionFactory" ref="sessionFactory" />
    <property name="queryString" value="select a from Annotation a join a.authority auth where a.jobId not in (select r.jobId from Resource r join r.organisation org where org.identifier = :authorityIdentifier) and auth.identifier = :authorityIdentifier" />
    <property name="parameterValues">
      <map>
          <entry key="authorityIdentifier" value="#{jobParameters['authority.name']}"/>
      </map>
    </property>
  </bean>

  <bean id="iucnResourceDeletingTasklet"
    class="org.emonocot.harvest.common.MultiResourceDeletingTasklet"
    scope="step">
    <property name="resources">
      <list>
        <bean class="org.springframework.core.io.FileSystemResource"
          scope="step">
          <constructor-arg value="#{jobExecutionContext['temporary.file.name']}" />
        </bean>
        <bean class="org.springframework.core.io.FileSystemResource"
          scope="step">
          <constructor-arg value="#{jobExecutionContext['split.file.name']}" />
        </bean>
      </list>
    </property>
  </bean>

</beans>
