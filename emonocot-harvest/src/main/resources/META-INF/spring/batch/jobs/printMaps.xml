<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	                    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">
	                    
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:META-INF/spring/*.properties"/>
	<context:annotation-config />

    <batch:job id="PrintMaps">
		<batch:description>Print several maps based on data from the database</batch:description>
		<batch:step id="printMaps">
			<batch:description>Re-index some or all of the eMonocot database</batch:description>
			<batch:tasklet>
				<batch:chunk reader="itemReader" writer="printMapWriter" commit-interval="10" />
			</batch:tasklet>
			<batch:end on="COMPLETED"/>		
		</batch:step>
	</batch:job>
	
	<bean id="itemReader" class="org.springframework.batch.item.database.HibernateCursorItemReader"	scope="step">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString" value="#{jobParameters['query.string']}" />		
	</bean>
	
	<bean id="printMapWriter" class="org.emonocot.job.map.PrintMapWriter">
	  <property name="mapPrinter" ref="mapPrinter"/>
	  <property name="config" value="classpath:/org/emonocot/job/map/config.yaml"/>
	  <property name="outputDirectory" ref="outputDirectory"/>
	  <property name="objectMapper" ref="objectMapper"/>
	</bean>
	
	<bean id="outputDirectory" class="org.springframework.core.io.FileSystemResource">
	    <constructor-arg value="${harvester.output.directory}" />
	</bean>

	<bean id="mapPrinter" class="org.mapfish.print.MapPrinter" scope="prototype"></bean>
	<bean id="configFactory" class="org.mapfish.print.config.ConfigFactory"></bean>

	<!-- Define MapReaderFactories -->
	<bean id="mapReaderFactoryFinder" class="org.mapfish.print.map.readers.MapReaderFactoryFinder"/>
	<bean id="wms-MapReaderFactory" class="org.mapfish.print.map.readers.WMSMapReader$Factory"/>
	<bean id="mapServer-MapReaderFactory" class="org.mapfish.print.map.readers.MapServerMapReader$Factory"/>
	<bean id="tileCache-MapReaderFactory" class="org.mapfish.print.map.readers.TileCacheMapReader$Factory"/>
	<bean id="osm-MapReaderFactory" class="org.mapfish.print.map.readers.OsmMapReader$Factory"/>
	<bean id="tms-MapReaderFactory" class="org.mapfish.print.map.readers.TmsMapReader$Factory"/>
	<bean id="vector-MapReaderFactory" class="org.mapfish.print.map.readers.VectorMapReader$Factory"/>
	<bean id="image-MapReaderFactory" class="org.mapfish.print.map.readers.ImageMapReader$Factory"/>
	<bean id="tiledGoogle-MapReaderFactory" class="org.mapfish.print.map.readers.google.GoogleMapTileReader$Factory"/>
	<bean id="google-MapReaderFactory" class="org.mapfish.print.map.readers.google.GoogleMapReader$Factory"/>
	<bean id="kaMapCache-ReaderFactory" class="org.mapfish.print.map.readers.KaMapCacheMapReader$Factory"/>
	<bean id="kaMap-ReaderFactory" class="org.mapfish.print.map.readers.KaMapMapReader$Factory"/>
	<bean id="wmts-ReaderFactory" class="org.mapfish.print.map.readers.WMTSMapReader$Factory"/>
	
	<!-- Define output factories -->
	<bean id="outputFactory" class="org.mapfish.print.output.OutputFactory">
		<property name="formatFactories">
			<list>
				<!-- <ref bean="imageMagickOutput" />-->
				<ref bean="fileCachingJaiMosaicOutputFactory" />
				<ref bean="inMemoryJaiMosaicOutputFactory" />
				<ref bean="pdfOutputFactory" />
			</list>
		</property>
	</bean>
	<bean id="imageMagickOutput" class="org.mapfish.print.output.NativeProcessOutputFactory">
		<!-- the path and command of the process to use for converting the pdf to another format.
		     The normal configuration is for imagemagick  -->
		<property name="cmd" value="${harvester.imagemagick.path}/convert"/>
		<!-- The arguments to use when running an imagemagick process -->
		<property name="cmdArgs">
			<list>
				<value>-density</value>
				<value>${dpi}</value>
				<value>-crop</value>
				<value>2479x2480+0+80</value>
				<value>-append</value>
				<value>${sourceFile}</value>
				<value>${targetFile}</value>
			</list>
		</property>
		<!-- Formats supported by the converter -->
		<property name="formats">
			<list>
				<value>jpg</value>
				<value>png</value>
				<value>tif</value>
				<value>tiff</value>
				<value>gif</value>
				<value>bmp</value>
			</list>
		</property>
		<!-- The number of concurrent processes to run.  Extra processes will wait their turn  -->
		<constructor-arg>
			<value>10</value>
		</constructor-arg>
		<!-- the length of time to wait for a process to be available before giving up -->
		<property name="timeoutSeconds">
			<value>30</value>
		</property>
	</bean>
	<bean id="fileCachingJaiMosaicOutputFactory" class="org.mapfish.print.output.FileCachingJaiMosaicOutputFactory"/>
	<bean id="inMemoryJaiMosaicOutputFactory" class="org.mapfish.print.output.InMemoryJaiMosaicOutputFactory"/>
	<bean id="pdfOutputFactory" class="org.mapfish.print.output.PdfOutputFactory"/>
	
</beans>
