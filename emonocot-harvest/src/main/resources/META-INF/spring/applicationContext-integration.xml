<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:integration="http://www.springframework.org/schema/integration"
    xmlns:int-jdbc="http://www.springframework.org/schema/integration/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/integration/jms"
	xmlns:integration-http="http://www.springframework.org/schema/integration/http"
    xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
        http://www.springframework.org/schema/integration/jdbc http://www.springframework.org/schema/integration/jdbc/spring-integration-jdbc-2.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<context:property-placeholder location="classpath*:META-INF/spring/*.properties" />

<!-- Integration setup for read write jobs -->
    <bean id="readWriteJobLaunchRequestsQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="read.write.job.launch.requests" />
	</bean>
	
	<jms:inbound-channel-adapter id="readWriteJobLaunchGateway"
		channel="readWriteJobLaunchRequests" destination="readWriteJobLaunchRequestsQueue"
		message-converter="mappingMessageConverter" connection-factory="connectionFactory" >
		<integration:poller fixed-rate="30000"/>
    </jms:inbound-channel-adapter>
	
	<integration:channel id="readWriteJobLaunchRequests" />

	<integration:service-activator input-channel="readWriteJobLaunchRequests" ref="readWriteJobLauncherImpl" method="launch" />

	<bean id="readWriteJobLauncherImpl" class="org.emonocot.harvest.integration.JobLauncherImpl">
		<property name="jobLauncher" ref="readWriteJobLauncher" />
		<property name="jobLocator" ref="jobRegistry" />
		<property name="jobStatusNotifier" ref="jobStatusNotifier"/>
		<property name="baseUrl" value="${harvester.baseUrl}" />
	</bean>	

<!-- Read only job queue -->
    <bean id="readOnlyJobLaunchRequestsQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="read.only.job.launch.requests" />
	</bean>
	
	<jms:inbound-channel-adapter id="readOnlyJobLaunchGateway"
		channel="readOnlyJobLaunchRequests" destination="readOnlyJobLaunchRequestsQueue"
		message-converter="mappingMessageConverter" connection-factory="connectionFactory" >
		<integration:poller fixed-rate="5000"/>
    </jms:inbound-channel-adapter>
	
	<integration:channel id="readOnlyJobLaunchRequests" />

	<integration:service-activator input-channel="readOnlyJobLaunchRequests" ref="readOnlyJobLauncherImpl" method="launch" />

	<bean id="readOnlyJobLauncherImpl" class="org.emonocot.harvest.integration.JobLauncherImpl">
		<property name="jobLauncher" ref="jobLauncher" />
		<property name="jobLocator" ref="jobRegistry" />
		<property name="jobStatusNotifier" ref="jobStatusNotifier"/>
		<property name="baseUrl" value="${harvester.baseUrl}" />
	</bean>
    
<!-- Comment sending -->
    <int-jdbc:inbound-channel-adapter channel="jdbcCommentChannel" data-source="dataSource" row-mapper="commentRowMapper"
            query="SELECT * FROM Comment c WHERE c.status = 'PENDING'"
            update="UPDATE Comment c SET status = 'SENT' WHERE c.id IN (:id)">
        <integration:poller fixed-rate="60000" />
    </int-jdbc:inbound-channel-adapter>
    <bean id="commentRowMapper" class="org.emonocot.persistence.dao.jdbc.ExtensibleBeanPropertyRowMapper">
        <property name="mappedClass" value="org.emonocot.model.Comment" />
        <property name="editors">
            <map>
                <entry key="org.joda.time.DateTime"><bean class="org.emonocot.persistence.dao.jdbc.DateTimePropertyEditor" /></entry>
            </map>
        </property>
    </bean>
    
    <integration:channel id="jdbcCommentChannel" />
    <integration:splitter input-channel="jdbcCommentChannel" output-channel="commentChannel" />
    <integration:channel id="commentChannel">
        <integration:interceptors>
            <integration:wire-tap channel="loggingChannel"/>
        </integration:interceptors>
    </integration:channel>
    
    <!-- Enriching that happens regardless of outbound endpoint -->
    <integration:chain id="enrichingChain" input-channel="commentChannel" output-channel="enrichedCommentChannel">
        <integration:enricher request-channel="loadCommentChannel" request-payload-expression="payload.identifier">
            <integration:property name="aboutData" expression="payload.aboutData" />
            <integration:property name="user" expression="payload.user"/>
        </integration:enricher>
        <integration:header-enricher>
            <integration:header name="destinations" ref="commentServiceImpl" method="getDestinationOrganisations" />
        </integration:header-enricher>
        <integration:splitter>
            <bean class="org.emonocot.integration.HeaderCollectionSplitter">
                <property name="requestKey" value="destinations" />
                <property name="responseKey" value="organisation" />
            </bean>
        </integration:splitter>
        <integration:header-enricher>
            <integration:header name="toAddress" expression="headers.organisation.commentsEmailedTo" />
            <integration:header name="subject" value="${comment.email.subject}" />
        </integration:header-enricher>
    </integration:chain>
    
    <integration:publish-subscribe-channel id="enrichedCommentChannel">
        <integration:interceptors>
            <integration:wire-tap channel="loggingChannel" />
        </integration:interceptors>
    </integration:publish-subscribe-channel>
    
    <!-- eMailing integration -->
    <integration:filter input-channel="enrichedCommentChannel" output-channel="toMapCommentChannel" expression="headers.organisation.commentsEmailedTo != null" />
    
    <integration:channel id="toMapCommentChannel" />
    
    <integration:transformer input-channel="toMapCommentChannel" output-channel="emailCommentChannel" method="prepareMessage">
        <bean class="org.emonocot.integration.EmailServiceHelper">
            <property name="templates">
                <map>
                    <entry key="comment" value="org/emonocot/integration/comment/CommentEmail.vm" />
                </map>
            </property>
            <property name="defaultTemplateName" value="comment" />
        </bean>
    </integration:transformer>
    
    <!-- service channels/endpoints -->
    <integration:channel id="emailCommentChannel">
        <integration:interceptors>
            <integration:wire-tap channel="loggingChannel" />
        </integration:interceptors>
    </integration:channel>
    <integration:service-activator input-channel="emailCommentChannel" expression="@emailService.sendEmail(headers.templateName, payload, 'joseph.kelly@kew.org', headers.subject + ' for ' + headers.toAddress)" />
    <integration:channel id="loadCommentChannel" />
    <integration:service-activator input-channel="loadCommentChannel" expression="@commentServiceImpl.load(payload, 'aboutData')" />
    
<!-- Generic logging at INFO level for channels -->
    <integration:publish-subscribe-channel id="loggingChannel" />
    <integration:logging-channel-adapter channel="loggingChannel" log-full-message="true" level="DEBUG" />
<!-- Generic message converter used by both queues -->

	<bean id="mappingMessageConverter"
		class="org.springframework.jms.support.converter.MappingJacksonMessageConverter">
		<property name="objectMapper" ref="objectMapper" />
		<property name="typeIdPropertyName" value="javaType" />
		<property name="typeIdMappings">
			<map>
				<entry>
					<key>
						<value>JobLaunchRequest</value>
					</key>
					<value>org.emonocot.api.job.JobLaunchRequest</value>
				</entry>
				<entry>
					<key>
						<value>JobExecutionInfo</value>
					</key>
					<value>org.emonocot.api.job.JobExecutionInfo</value>
				</entry>
			</map>
		</property>
	</bean>

</beans>
