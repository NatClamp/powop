<?xml version="1.0" encoding="UTF-8"?>
<project name="emonocot-portal" 
	default="prepare" basedir=".">
	<property file="./${profile}.properties" />
	<property name="name" value="emonocot-portal"/>
	<property name="target" value="${basedir}/target" />
	<property name="main.src" value="${basedir}/src/main/java" />
	<property name="main.filter" value="${basedir}/src/main/filter" />
	<property name="main.images" value="${basedir}/src/main/images" />
	<property name="main.js" value="${basedir}/src/main/js" />
	<property name="main.css" value="${basedir}/src/main/css" />
	<property name="main.less" value="${basedir}/src/main/less" />
	<property name="main.webapp" value="${basedir}/src/main/webapp" />
	<property name="main.resources" value="${basedir}/src/main/resources" />
	<property name="test.src" value="${basedir}/src/test/java" />
	<property name="compile.lib" value="${basedir}/lib/compile" />
	<property name="test.lib" value="${basedir}/lib/test" />
	<property name="provided.lib" value="${basedir}/lib/provided" />
	<property name="test.resources" value="${basedir}/src/test/resources" />
	<!--When set to true, any existing update will be undeployed first. The default value is set to false.-->
	<property name="tomcat.manager.update" value="false" />
	<path id="main.class.path">
		<fileset dir="${compile.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${provided.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="test.class.path">
		<fileset dir="${compile.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${provided.lib}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${test.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${target}/classes" />
		<pathelement location="${target}/test-classes" />
	</path>

	<taskdef name="list" classname="org.apache.catalina.ant.ListTask">
		<classpath location="${test.lib}/catalina-ant-5.5.23.jar" />
	</taskdef>

	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask">
		<classpath location="${test.lib}/catalina-ant-5.5.23.jar" />
	</taskdef>

	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">
		<classpath location="${test.lib}/catalina-ant-5.5.23.jar" />
	</taskdef>

	<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
		<classpath location="${test.lib}/ant-junit-1.8.2.jar" />
		<classpath location="${test.lib}/junit-4.8.1.jar" />
	</taskdef>

	<target name="clean" description="Removes all directories related to this build, but not the Eclipse build dir">
		<echo message="cleaning source tree" />
		<delete dir="${target}" />
	</target>

	<target name="prepare" depends="clean" description="Creates directories required for build" >
		<echo message="preparing directory structure for build" />
		<mkdir dir="${target}" />
	</target>

	<target name="compile" depends="prepare"
	        description="Compiles the source tree">
		<echo message="compiling source tree" />
		<mkdir dir="${target}/classes" />
		<javac destdir="${target}/classes"
	            debug="on"
	            deprecation="off"
	            optimize="on"
			    encoding="utf8"
				source="1.5"
				target="1.5">
			<src path="${main.src}" />
			<classpath refid="main.class.path" />
		</javac>
		<!-- copy resource files to the build tree -->
		<copy todir="${target}/classes">
			<fileset dir="${main.resources}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="test-compile" depends="compile" description="Compiles the test source tree">
		<echo message="compiling test source tree" />
		<mkdir dir="${target}/test-classes" />
		<javac destdir="${target}/test-classes" debug="on" deprecation="off" optimize="on" encoding="utf8" source="1.5" target="1.5">
			<src path="${test.src}" />
			<classpath refid="test.class.path" />
		</javac>
		<!-- copy resource files to the build tree -->
		<copy todir="${target}/test-classes">
			<fileset dir="${test.resources}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<target name="test" description="Execute unit tests" depends="test-compile">
		<mkdir dir="${target}/surefire-reports" />
		<junit printsummary="true" failureproperty="junit.failure">
			<classpath refid="test.class.path" />
			<batchtest todir="${target}/surefire-reports">
				<fileset dir="${target}/test-classes">
					<include name="**/*Test.class" />
					<exclude name="**/*IntegrationTest.class" />
					<exclude name="**/*FunctionalTest.class" />
				</fileset>
				<formatter type="xml" />
				<formatter type="plain" />
			</batchtest>
		</junit>
		<fail if="junit.failure" message="Unit test(s) failed.  See reports!" />
	</target>

	<target name="war" depends="compile" description="Puts all build artefacts into a warfile structure in the build directory">

		<echo message="creating war structure" />
		<mkdir dir="${target}/${name}" />
		<mkdir dir="${target}/${name}/WEB-INF" />
		<mkdir dir="${target}/${name}/WEB-INF/lib" />
		<!-- copy resource files to the build tree-->
		<copy todir="${target}/${name}" filtering="false">
			<fileset dir="${main.webapp}">
				<include name="**/*"/>
				<exclude name="WEB-INF/web.xml"/>
			</fileset>
		</copy>

		<!-- copy resource files to the build tree this time with filtering-->
		<copy todir="${target}/${name}/WEB-INF" filtering="true">
			<filterchain>
				<expandproperties/>
			</filterchain>
			<fileset dir="${main.filter}">
				<include name="**/*"/>
			</fileset>
		</copy>

		<!-- copy compiled files to WEB-INF/classes -->
		<copy todir="${target}/${name}/WEB-INF/classes" filtering="false">
			<fileset dir="${target}/classes">
				<include name="**/*"/>
			</fileset>
		</copy>
		<!-- copy rest of required jars from lib to WEB-INF/lib" -->
		<copy todir="${target}/${name}/WEB-INF/lib">
			<fileset dir="${compile.lib}">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<war basedir="${target}/${name}" destfile="${target}/${name}.war"
             webxml="${target}/${name}/WEB-INF/web.xml" compress="true"/>
	</target>

	<target name="tomcat.application.status">
		<property name="running" value="${cargo.context.path}:running"/>
		<property name="stopped" value="${cargo.context.path}:stopped"/>

		<echo message="${cargo.tomcat.manager.url}"/>
		<echo message="${cargo.remote.username}"/>
		<echo message="${cargo.remote.password}"/>
		<echo message="${cargo.context.path}"/>
		
		<list url="${cargo.tomcat.manager.url}"
				outputproperty="application.status"
				username="${cargo.remote.username}"
				password="${cargo.remote.password}">
		</list>

		<condition property="application.running" else="false">
			<contains string="${application.status}" substring="${running}"/>
		</condition>
		<condition property="application.stopped" else="false">
			<contains string="${application.status}" substring="${stopped}"/>
		</condition>
		<condition property="application.notInstalled" else="false">
			<and>
				<isfalse value="${application.running}"/>
				<isfalse value="${application.stopped}"/>
			</and>
		</condition>
		<condition property="application.deployable" else="false">
			<or>
				<istrue value="${application.notInstalled}"/>
				<and>
					<istrue value="${application.running}"/>
					<istrue value="${tomcat.manager.update}"/>
				</and>
				<and>
					<istrue value="${application.stopped}"/>
					<istrue value="${tomcat.manager.update}"/>
				</and>
			</or>
		</condition>
		<condition property="application.undeployable" else="false">
			<or>
				<istrue value="${application.running}"/>
				<istrue value="${application.stopped}"/>
			</or>
		</condition>
		<echo message="Application can be deployed straight? ${application.deployable}" />
		<echo message="Application must be redeployed? ${application.undeployable}" />
	</target>

	<target name="deploy" 
					description="Install web application"
					depends="war, tomcat.application.status"
		            if="application.deployable">
		<deploy 
						url="${cargo.tomcat.manager.url}" 
						username="${cargo.remote.username}"
						password="${cargo.remote.password}"
						path="/${cargo.context.path}" 
						war="${target}/${name}.war"/>
	</target>

	<target name="redeploy" 
					description="Install web application"
					depends="war, undeploy">
		<deploy 
			url="${cargo.tomcat.manager.url}" 
			username="${cargo.remote.username}"
			password="${cargo.remote.password}"
			path="/${cargo.context.path}" 
						war="${target}/${name}.war"/>
	</target>

	<target name="undeploy" description="Remove web application"
		depends="tomcat.application.status"
		if="application.undeployable">
		<undeploy 
			url="${cargo.tomcat.manager.url}" 
			username="${cargo.remote.username}"
			password="${cargo.remote.password}"
			path="/${cargo.context.path}"/>
	</target>
	
	<target name="compile-less" description="Compile the less files">
		 <taskdef name="lesscss" classname="org.emonocot.task.LessCSSTask">
			      <classpath>
			        <path location="${test.lib}/emonocot-task-0.0.1.jar"/>
			      	<path location="${test.lib}/lesscss4j-1.0.0.jar"/>
			      	<path location="${test.lib}/rhino-1.7R3.jar"/>
			      	<path location="${test.lib}/commons-logging-1.1.1.jar"/>
			      	<path location="${test.lib}/commons-lang3-3.0.1.jar"/>
			      	<path location="${test.lib}/commons-io-2.0.1.jar"/>
			      </classpath>
		 </taskdef>
		<delete dir="${target}/compiled-less/"/>
	    <mkdir dir="${target}/compiled-less/" />
		<lesscss dir="${main.less}" includes="bootstrap.less" todir="${target}/compiled-less/" />
	</target>
	
	<target name="compress-static" description="Minifiy the static files" depends="compile-less">
	    <taskdef name="yuicompress" classname="com.yahoo.platform.yui.compressor.YUICompressTask">
	      <classpath>
	        <path location="${test.lib}/yuicompressor-2.2.5.jar"/>
	      	<path location="${test.lib}/YUIAnt-0.1.jar"/>
	      </classpath>
	    </taskdef>

	    <delete dir="${target}/yuicompressor/"/>
	    <mkdir dir="${target}/yuicompressor/" />
		<delete dir="${target}/static/js/"/>
	    <mkdir dir="${target}/static/js/" />
	    <yuicompress linebreak="300" warn="false" munge="yes" preserveallsemicolons="true"
	                outputfolder="${target}/yuicompressor/" >
	      <fileset dir="${main.js}" >
	        <include name="**/*.js" />
	      </fileset>
	    </yuicompress>
		<concat destfile="${target}/static/js/header.js">
		  <filelist dir="${target}/yuicompressor/">
		  	<file name="ad-gallery/jquery.ad-gallery.js" />
		    <file name="functions.js" />
		  	<file name="bootstrap-twipsy.js" />
		    <file name="jsTree/jquery.jstree.js" />
		  </filelist>
		</concat>
		<yuicompress linebreak="300" warn="false" munge="yes" preserveallsemicolons="true"
			                outputfolder="${target}/yuicompressor/" >
		    <fileset dir="${main.css}" >
			  <include name="**/*.css" />			  
			</fileset>
	    </yuicompress>
		<yuicompress linebreak="300" warn="false" munge="yes" preserveallsemicolons="true"
					                outputfolder="${target}/yuicompressor/" >
			<fileset dir="${target}/compiled-less/" >
			  <include name="*.css" />			  
			</fileset>
	    </yuicompress>
		<concat destfile="${target}/static/css/style.css">
		  <filelist dir="${target}/yuicompressor/">
			  <file name="before.css"/>
			  <file name="bootstrap.css"/>
			  <file name="jqueryui/jqueryui.css"/>
			  <file name="ad-gallery/jquery.ad-gallery.css"/>              
			  <file name="jsTree/jsTree.css"/>
		  </filelist>		  
		</concat>		
	</target>
	
	<target name="copy-images-css" description="copy images to target static dir" depends="compress-static">
		<copy todir="${target}/static/images">
		  <fileset dir="${main.images}" includes="**/*" />
		</copy>		
	</target>

	<target name="check.upload.method" depends="copy-images-css">
		<condition property="wagon.upload.remote">
			<equals arg1="${wagon.upload.protocol}" arg2="scp" />
		</condition>
		<condition property="wagon.upload.local">
			<equals arg1="${wagon.upload.protocol}" arg2="file" />
		</condition>
	</target>

	<target name="upload.remote" depends="check.upload.method" if="wagon.upload.remote">
		<scp todir="${wagon.static.url}" trust="true" keyfile="${server.privateKey}" passphrase="${server.passphrase}">
			<fileset dir="${target}/static/">
				<include name="**/*" />
			</fileset>
		</scp>
	</target>

	<target name="upload.local" depends="check.upload.method" if="wagon.upload.local">
		<copy todir="${wagon.static.url}">
			<fileset dir="${target}/static/">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>
	
	<target name="upload" depends="upload.remote, upload.local"/>
	
	<target name="update-database">
	    <fail unless="db.changelog.file">db.changelog.file not set</fail>
	    <fail unless="database.url">database.url not set</fail>
	 
	    <fail unless="database.username">database.username not set</fail>
	    <fail unless="database.password">database.password not set</fail>
	 
	    <taskdef name="liquibase.ant.DatabaseUpdateTask">
	        <classpath location="${test.lib}/liquibase-5.5.23.jar"/>	 
	    </taskdef>

	    <updateDatabase
	            changeLogFile="../emonocot-persistence/src/main/resources/${database.changelog}"
	            driver="${jdbc.driver.classname}"
	            url="${jdbc.driver.url}"
	            username="${jdbc.driver.username}"
	            password="${jdbc.driver.password}"
	            promptOnNonLocalDatabase="true"
	            dropFirst="false"
	            classpathref="main.class.path"
	    />
	 
	</target>
</project>