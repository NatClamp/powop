<?xml version="1.0" encoding="UTF-8" ?>
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page"
	xmlns:spring="http://www.springframework.org/tags"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:em="http://e-monocot.org/portal/functions"
	xmlns:tags="urn:jsptagdir:/WEB-INF/tags"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions" version="2.0">
	<jsp:directive.attribute name="name" type="java.lang.String" required="true" />
	<jsp:directive.attribute name="typesAndSpecimens" type="java.util.Collection" required="false" />
	<jsp:directive.attribute name="typesAndSpecimensUrl" type="java.lang.String" required="false" />
		
	// Define three colors that will be used to style the cluster features
	// depending on the number of features they contain.
	var colors = {
		point: "rgb(255,210,54)",
		cluster10: "rgb(255,210,54)",
		cluster100: "rgb(255,150,64)",
		cluster250: "rgb(255,119,0)",
		cluster1000: "rgb(254,58,177)",
		clusterBig: "rgb(213,12,84)"
	};
	
	// Define rules to style the cluster features.
	var pointRule = new OpenLayers.Rule({
		filter: new OpenLayers.Filter.Comparison({
			type: OpenLayers.Filter.Comparison.EQUAL_TO,
			property: "count",
			value: 1}),
		symbolizer: {
			fillColor: colors.point,
			fillOpacity: 0.9, 
			strokeColor: colors.point,
			strokeOpacity: 0.5,
			//strokeWidth: 6,
			pointRadius: 4,
			labelOutlineWidth: 1,
			fontColor: "#ffffff",
			fontOpacity: 0.8,
			fontSize: "8px"
		}
	});
	
	var clusterRule10 = new OpenLayers.Rule({
		filter: new OpenLayers.Filter.Comparison({
			type: OpenLayers.Filter.Comparison.BETWEEN,
			property: "count",
			lowerBoundary: 2,
			upperBoundary: 10
		}),
		symbolizer: {
			fillColor: colors.cluster10,
			fillOpacity: 0.4,
			strokeColor: colors.cluster10,
			strokeOpacity: 0.9,
			strokeWidth: 2,
			pointRadius: 6,
			label: "${count}",
			labelOutlineWidth: 1,
			fontColor: "#000000",
			fontOpacity: 0.8,
			fontSize: "8px"
		}
	});
	var clusterRule100 = new OpenLayers.Rule({
		filter: new OpenLayers.Filter.Comparison({
			type: OpenLayers.Filter.Comparison.BETWEEN,
			property: "count",
			lowerBoundary: 11,
			upperBoundary: 100
		}),
		symbolizer: {
			fillColor: colors.cluster100,
			fillOpacity: 0.5,
			strokeColor: colors.cluster100,
			strokeOpacity: 0.9,
			strokeWidth: 2,
			pointRadius: 9,
			label: "${count}",
			labelOutlineWidth: 1,
			fontColor: "#000000",
			fontOpacity: 0.8,
			fontSize: "8px"
		}
	});
	var clusterRule250 = new OpenLayers.Rule({
		filter: new OpenLayers.Filter.Comparison({
			type: OpenLayers.Filter.Comparison.BETWEEN,
			property: "count",
			lowerBoundary: 101,
			upperBoundary: 250
		}),
		symbolizer: {
			fillColor: colors.cluster250,
			fillOpacity: 0.5,
			strokeColor: colors.cluster250,
			strokeOpacity: 0.9,
			strokeWidth: 2,
			pointRadius: 12,
			label: "${count}",
			labelOutlineWidth: 1,
			fontColor: "#000000",
			fontOpacity: 0.8,
			fontSize: "8px"
		}
	});
	var clusterRule1000 = new OpenLayers.Rule({
		filter: new OpenLayers.Filter.Comparison({
			type: OpenLayers.Filter.Comparison.BETWEEN,
			property: "count",
			lowerBoundary: 251,
			upperBoundary: 1000
		}),
		symbolizer: {
			fillColor: colors.cluster1000,
			fillOpacity: 0.5,
			strokeColor: colors.cluster1000,
			strokeOpacity: 0.9,
			strokeWidth: 2,
			pointRadius: 15,
			label: "${count}",
			labelOutlineWidth: 1,
			fontColor: "#000000",
			fontOpacity: 0.8,
			fontSize: "8px"
		}
	});
	var clusterRuleBig = new OpenLayers.Rule({
		filter: new OpenLayers.Filter.Comparison({
			type: OpenLayers.Filter.Comparison.GREATER_THAN,
			property: "count",
			value: 1001
		}),
		symbolizer: {
			fillColor: colors.clusterBig,
			fillOpacity: 0.5,
			strokeColor: colors.clusterBig,
			strokeOpacity: 0.9,
			strokeWidth: 2,
			pointRadius: 20,
			label: "${count}",
			labelOutlineWidth: 1,
			fontColor: "#000000",
			fontOpacity: 0.8,
			fontSize: "8px"
		}
	});
	
	// Create a Style that uses the three previous rules
	var style = new OpenLayers.Style(null, {
		rules: [pointRule, clusterRule10, clusterRule100, clusterRule250, clusterRule1000, clusterRuleBig]
	});
	
	var select, selectedFeature;
	var geojson_format = new OpenLayers.Format.GeoJSON({"internalProjection": new OpenLayers.Projection("EPSG:3857"),
		"externalProjection": new OpenLayers.Projection("EPSG:4326")});
	
	<c:choose>
	  <c:when test="${not empty typesAndSpecimens}">
	  var ${name} = new OpenLayers.Layer.Vector("${name}", {
		strategies: [new OpenLayers.Strategy.Cluster()], styleMap:new OpenLayers.StyleMap(style)});
	  map.addLayer(${name});
	
	  var featurecollection = {
		"type": "FeatureCollection",
		"features": [
			<c:forEach var="specimen" varStatus="status" items="${typesAndSpecimens}">
				<c:if test="${not empty specimen.decimalLatitude and not empty specimen.decimalLongitude}">
					{"type":"Feature",
					"properties":{
						"catalogNumber":"${em:escape(specimen.catalogNumber)}",
						"collectionCode":"${em:escape(specimen.collectionCode)}",
						"institutionCode":"${em:escape(specimen.institutionCode)}",
						"locality":"${em:escape(specimen.locality)}",
						"source":"${em:escape(specimen.source)}"
					},
					"geometry":{
						"type":"Point",
						"coordinates":[${specimen.decimalLongitude},${specimen.decimalLatitude}]
						}
					}
					<c:if test="${not status.last}">,</c:if>
				</c:if>
			</c:forEach>
		]
	  };
	  ${name}.addFeatures(geojson_format.read(featurecollection));
	  </c:when>
	  <c:otherwise>
	    var ${name} = new OpenLayers.Layer.Vector("${name}", {
	        strategies: [new OpenLayers.Strategy.Fixed(),new OpenLayers.Strategy.Cluster()],
	        styleMap:new OpenLayers.StyleMap(style),
	        protocol: new OpenLayers.Protocol.HTTP({ url: "${typesAndSpecimensUrl}", format: geojson_format, headers: {'Accept':'application/json', 'Content-Type':'application/json'} })});
	    map.addLayer(${name});
	  </c:otherwise>
	</c:choose>

	function onPopupClose(evt) {
		select.unselect(selectedFeature);
	}
	
	function onFeatureSelect(feature) {
	
		selectedFeature = feature;
		map.setCenter(feature.geometry.getBounds().getCenterLonLat());
		
		if(feature.cluster.length == 1) {
		    var contents = "<dl>";
		    if(feature.cluster[0].attributes.catalogNumber !== undefined &amp;&amp; feature.cluster[0].attributes.catalogNumber != "") {
		       contents += "<dt>Catalog Number:</dt><dd>" + feature.cluster[0].attributes.catalogNumber + "</dd>";
		    }
		    if(feature.cluster[0].attributes.collectionCode !== undefined &amp;&amp; feature.cluster[0].attributes.collectionCode != "") {
		        contents += "<dt>Collection Code:</dt><dd>" + feature.cluster[0].attributes.collectionCode + "</dd>";
		    }
		    if(feature.cluster[0].attributes.institutionCode !== undefined &amp;&amp; feature.cluster[0].attributes.institutionCode != "") { 
			    contents += "<dt>Institution Code:</dt><dd>" + feature.cluster[0].attributes.institutionCode + "</dd>";
			}
			if(feature.cluster[0].attributes.locality !== undefined &amp;&amp; feature.cluster[0].attributes.locality != "") {
				contents += "<dt>Locality:</dt><dd>" + feature.cluster[0].attributes.locality + "</dd>";
		    }
		    
			contents += "<dt>&lt;a href='" + feature.cluster[0].attributes.source + "'&gt;Source Link&lt;/a&gt;</dt></dl>"
			popup = new OpenLayers.Popup.FramedCloud(
				"specimenPopup",
				feature.geometry.getBounds().getCenterLonLat(),
				null,
				contents,
				null,
				true,
				onPopupClose);
		} else {
			popup = new OpenLayers.Popup.FramedCloud(
				"specimenPopup",
				feature.geometry.getBounds().getCenterLonLat(),
				null,
				"<div>" + feature.cluster.length + " specimens</div>",
				null,
				true,
				onPopupClose);
		}
		popup.closeOnMove = true;
		feature.popup = popup;
		map.addPopup(popup);
	}

	function onFeatureUnselect(feature) {
		
		feature.popup.destroy();
		feature.popup = null;
	}
	
	select = new OpenLayers.Control.SelectFeature(${name}, {onSelect: onFeatureSelect, onUnselect: onFeatureUnselect});
	
	map.addControl(select);
	select.activate();
	
</jsp:root>
