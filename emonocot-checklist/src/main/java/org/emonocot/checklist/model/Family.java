package org.emonocot.checklist.model;

/**
 *
 * @author ben
 *
 */
public enum Family {
    /**
     *
     */
    Acoraceae(1),
    /**
     *
     */
    Anarthriaceae(2),
    /**
     *
     */
    Araceae(3),
    /**
     *
     */
    Arecaceae(4),
    /**
     *
     */
    Asparagaceae(5),
    /**
     *
     */
    Bromeliaceae(6),
    /**
     *
     */
    Burmanniaceae(7),
    /**
     *
     */
    Cannaceae(8),
    /**
     *
     */
    Centrolepidaceae(9),
    /**
     *
     */
    Commelinaceae(10),
    /**
     *
     */
    Costaceae(11),
    /**
     *
     */
    Cyclanthaceae(12),
    /**
     *
     */
    Cyperaceae(13),
    /**
     *
     */
    Dasypogonaceae(14),
    /**
     *
     */
    Dioscoreaceae(15),
    /**
     *
     */
    Ecdeiocoleaceae(16),
    /**
     *
     */
    Eriocaulaceae(17),
    /**
     *
     */
    Flagellariaceae(18),
    /**
     *
     */
    Haemodoraceae(19),
    /**
     *
     */
    Hanguanaceae(20),
    /**
     *
     */
    Heliconiaceae(21),
    /**
     *
     */
    Hydrocharitaceae(23),
    /**
     *
     */
    Iridaceae(24),
    /**
     *
     */
    Joinvilleaceae(25),
    /**
     *
     */
    Juncaceae(26),
    /**
     *
     */
    Lanariaceae(27),
    /**
     *
     */
    Lowiaceae(28),
    /**
     *
     */
    Marantaceae(29),
    /**
     *
     */
    Mayacaceae(30),
    /**
     *
     */
    Musaceae(31),
    /**
     *
     */
    Orchidaceae(32),
    /**
     *
     */
    Petrosaviaceae(33),
    /**
     *
     */
    Philydraceae(34),
    /**
     *
     */
    Pontederiaceae(35),
    /**
     *
     */
    Rapateaceae(36),
    /**
     *
     */
    Restionaceae(37),
    /**
     *
     */
    Strelitziaceae(38),
    /**
     *
     */
    Thurniaceae(39),
    /**
     *
     */
    Typhaceae(40),
    /**
     *
     */
    Xyridaceae(41),
    /**
     *
     */
    Zingiberaceae(42),
    /**
     *
     */
    Cymodoceaceae(43),
    /**
     *
     */
    Alismataceae(44),
    /**
     *
     */
    Alliaceae(45),
    /**
     *
     */
    Alstroemeriaceae(46),
    /**
     *
     */
    Aponogetonaceae(47),
    /**
     *
     */
    Asteliaceae(48),
    /**
     *
     */
    Blandfordiaceae(49),
    /**
     *
     */
    Boryaceae(50),
    /**
     *
     */
    Butomaceae(51),
    /**
     *
     */
    Campynemataceae(52),
    /**
     *
     */
    Colchicaceae(53),
    /**
     *
     */
    Corsiaceae(54),
    /**
     *
     */
    Doryanthaceae(55),
    /**
     *
     */
    Hypoxidaceae(56),
    /**
     *
     */
    Ixioliriaceae(57),
    /**
     *
     */
    Juncaginaceae(58),
    /**
     *
     */
    Liliaceae(59),
    /**
     *
     */
    Limnocharitaceae(60),
    /**
     *
     */
    Luzuriagaceae(61),
    /**
     *
     */
    Melanthiaceae(62),
    /**
     *
     */
    Nartheciaceae(63),
    /**
     *
     */
    Pandanaceae(64),
    /**
     *
     */
    Philesiaceae(65),
    /**
     *
     */
    Posidoniaceae(66),
    /**
     *
     */
    Potamogetonaceae(67),
    /**
     *
     */
    Rhipogonaceae(68),
    /**
     *
     */
    Ruppiaceae(69),
    /**
     *
     */
    Scheuchzeriaceae(70),
    /**
     *
     */
    Smilacaceae(71),
    /**
     *
     */
    Stemonaceae(72),
    /**
     *
     */
    Tecophilaeaceae(73),
    /**
     *
     */
    Tofieldiaceae(74),
    /**
     *
     */
    Triuridaceae(75),
    /**
     *
     */
    Velloziaceae(76),
    /**
     *
     */
    Xanthorrhoeaceae(77),
    /**
     *
     */
    Xeronemataceae(78),
    /**
     *
     */
    Zosteraceae(79),
    /**
     *
     */
    Poaceae(80),
    /**
     *
     */
    Amaryllidaceae(81),
    /**
     *
     */
    Petermanniaceae(82);

    /**
     *
     */
    public static String IDENTIFIER_PREFIX = "urn:kew.org:wcs:family:";

   /**
    *
    */
   public static String NAME_IDENTIFIER_PREFIX = "urn:kew.org:wcs:familyName:";

    /**
     *
     */
    private long identifier;

    /**
     *
     * @param newIdentifier the identifier of the family
     */
    private Family(final long newIdentifier) {
        this.identifier = -1 * newIdentifier;
    }

    /**
     *
     * @param theIdentifier an identifier
     * @return A Family enum value
     */
    public static Family fromIdentifier(final long theIdentifier) {
        for (Family family : Family.values()) {
            if (family.identifier == theIdentifier) {
                return family;
            }
        }
        throw new IllegalArgumentException(
                theIdentifier + " is not a valid identifier value for Family");
    }

    /**
     *
     * @return the identifier of the family
     */
    public String getIdentifier() {
        return Family.IDENTIFIER_PREFIX + (-1 * identifier);
    }

   /**
    *
    * @return the identifier of the family
    */
   public String getNameId() {
       return Family.NAME_IDENTIFIER_PREFIX + (-1 * identifier);
   }
}
